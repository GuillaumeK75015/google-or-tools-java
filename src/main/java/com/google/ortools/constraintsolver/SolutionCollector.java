/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

public class SolutionCollector extends SearchMonitor {
  private transient long swigCPtr;

  protected SolutionCollector(long cPtr, boolean cMemoryOwn) {
    super(operations_research_constraint_solverJNI.SolutionCollector_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SolutionCollector obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        operations_research_constraint_solverJNI.delete_SolutionCollector(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SolutionCollector(Solver solver, Assignment assignment) {
    this(operations_research_constraint_solverJNI.new_SolutionCollector__SWIG_0(Solver.getCPtr(solver), solver, Assignment.getCPtr(assignment), assignment), true);
  }

  public SolutionCollector(Solver solver) {
    this(operations_research_constraint_solverJNI.new_SolutionCollector__SWIG_1(Solver.getCPtr(solver), solver), true);
  }

  public void add(IntVar var) {
    operations_research_constraint_solverJNI.SolutionCollector_add__SWIG_0(swigCPtr, this, IntVar.getCPtr(var), var);
  }

  public void add(IntVar[] vars) {
    operations_research_constraint_solverJNI.SolutionCollector_add__SWIG_1(swigCPtr, this, vars);
  }

  public void add(IntervalVar var) {
    operations_research_constraint_solverJNI.SolutionCollector_add__SWIG_2(swigCPtr, this, IntervalVar.getCPtr(var), var);
  }

  public void add(IntervalVar[] vars) {
    operations_research_constraint_solverJNI.SolutionCollector_add__SWIG_3(swigCPtr, this, vars);
  }

  public void add(SequenceVar var) {
    operations_research_constraint_solverJNI.SolutionCollector_add__SWIG_4(swigCPtr, this, SequenceVar.getCPtr(var), var);
  }

  public void add(SequenceVar[] vars) {
    operations_research_constraint_solverJNI.SolutionCollector_add__SWIG_5(swigCPtr, this, vars);
  }

  public void addObjective(IntVar objective) {
    operations_research_constraint_solverJNI.SolutionCollector_addObjective(swigCPtr, this, IntVar.getCPtr(objective), objective);
  }

  public void enterSearch() {
    operations_research_constraint_solverJNI.SolutionCollector_enterSearch(swigCPtr, this);
  }

  public int solutionCount() {
    return operations_research_constraint_solverJNI.SolutionCollector_solutionCount(swigCPtr, this);
  }

  public Assignment solution(int n) {
    long cPtr = operations_research_constraint_solverJNI.SolutionCollector_solution(swigCPtr, this, n);
    return (cPtr == 0) ? null : new Assignment(cPtr, false);
  }

  public long wallTime(int n) {
    return operations_research_constraint_solverJNI.SolutionCollector_wallTime(swigCPtr, this, n);
  }

  public long branches(int n) {
    return operations_research_constraint_solverJNI.SolutionCollector_branches(swigCPtr, this, n);
  }

  public long failures(int n) {
    return operations_research_constraint_solverJNI.SolutionCollector_failures(swigCPtr, this, n);
  }

  public long objectiveValue(int n) {
    return operations_research_constraint_solverJNI.SolutionCollector_objectiveValue(swigCPtr, this, n);
  }

  public long value(int n, IntVar var) {
    return operations_research_constraint_solverJNI.SolutionCollector_value(swigCPtr, this, n, IntVar.getCPtr(var), var);
  }

  public long startValue(int n, IntervalVar var) {
    return operations_research_constraint_solverJNI.SolutionCollector_startValue(swigCPtr, this, n, IntervalVar.getCPtr(var), var);
  }

  public long endValue(int n, IntervalVar var) {
    return operations_research_constraint_solverJNI.SolutionCollector_endValue(swigCPtr, this, n, IntervalVar.getCPtr(var), var);
  }

  public long durationValue(int n, IntervalVar var) {
    return operations_research_constraint_solverJNI.SolutionCollector_durationValue(swigCPtr, this, n, IntervalVar.getCPtr(var), var);
  }

  public long performedValue(int n, IntervalVar var) {
    return operations_research_constraint_solverJNI.SolutionCollector_performedValue(swigCPtr, this, n, IntervalVar.getCPtr(var), var);
  }

  public int[] ForwardSequence(int n, SequenceVar var) {
  return operations_research_constraint_solverJNI.SolutionCollector_ForwardSequence(swigCPtr, this, n, SequenceVar.getCPtr(var), var);
}

  public int[] BackwardSequence(int n, SequenceVar var) {
  return operations_research_constraint_solverJNI.SolutionCollector_BackwardSequence(swigCPtr, this, n, SequenceVar.getCPtr(var), var);
}

  public int[] Unperformed(int n, SequenceVar var) {
  return operations_research_constraint_solverJNI.SolutionCollector_Unperformed(swigCPtr, this, n, SequenceVar.getCPtr(var), var);
}

}

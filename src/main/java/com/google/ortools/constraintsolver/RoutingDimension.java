/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

public class RoutingDimension {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected RoutingDimension(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RoutingDimension obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        operations_research_constraint_solverJNI.delete_RoutingDimension(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public RoutingModel model() {
    long cPtr = operations_research_constraint_solverJNI.RoutingDimension_model(swigCPtr, this);
    return (cPtr == 0) ? null : new RoutingModel(cPtr, false);
  }

  public long GetTransitValue(long from_index, long to_index, long vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetTransitValue(swigCPtr, this, from_index, to_index, vehicle);
  }

  public long GetTransitValueFromClass(long from_index, long to_index, long vehicle_class) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetTransitValueFromClass(swigCPtr, this, from_index, to_index, vehicle_class);
  }

  public IntVar cumulVar(long index) {
    long cPtr = operations_research_constraint_solverJNI.RoutingDimension_cumulVar(swigCPtr, this, index);
    return (cPtr == 0) ? null : new IntVar(cPtr, false);
  }

  public IntVar transitVar(long index) {
    long cPtr = operations_research_constraint_solverJNI.RoutingDimension_transitVar(swigCPtr, this, index);
    return (cPtr == 0) ? null : new IntVar(cPtr, false);
  }

  public IntVar FixedTransitVar(long index) {
    long cPtr = operations_research_constraint_solverJNI.RoutingDimension_FixedTransitVar(swigCPtr, this, index);
    return (cPtr == 0) ? null : new IntVar(cPtr, false);
  }

  public IntVar slackVar(long index) {
    long cPtr = operations_research_constraint_solverJNI.RoutingDimension_slackVar(swigCPtr, this, index);
    return (cPtr == 0) ? null : new IntVar(cPtr, false);
  }

  public IntVar[] cumuls() {
  return operations_research_constraint_solverJNI.RoutingDimension_cumuls(swigCPtr, this);
}

  public IntVar[] transits() {
  return operations_research_constraint_solverJNI.RoutingDimension_transits(swigCPtr, this);
}

  public IntVar[] slacks() {
  return operations_research_constraint_solverJNI.RoutingDimension_slacks(swigCPtr, this);
}

  public void SetSpanUpperBoundForVehicle(long upper_bound, int vehicle) {
    operations_research_constraint_solverJNI.RoutingDimension_SetSpanUpperBoundForVehicle(swigCPtr, this, upper_bound, vehicle);
  }

  public void setSpanCostCoefficientForVehicle(long coefficient, int vehicle) {
    operations_research_constraint_solverJNI.RoutingDimension_setSpanCostCoefficientForVehicle(swigCPtr, this, coefficient, vehicle);
  }

  public void setSpanCostCoefficientForAllVehicles(long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_setSpanCostCoefficientForAllVehicles(swigCPtr, this, coefficient);
  }

  public void setGlobalSpanCostCoefficient(long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_setGlobalSpanCostCoefficient(swigCPtr, this, coefficient);
  }

  public void setCumulVarSoftUpperBound(int node, long upper_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_setCumulVarSoftUpperBound(swigCPtr, this, node, upper_bound, coefficient);
  }

  public void SetStartCumulVarSoftUpperBound(int vehicle, long upper_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetStartCumulVarSoftUpperBound(swigCPtr, this, vehicle, upper_bound, coefficient);
  }

  public void SetEndCumulVarSoftUpperBound(int vehicle, long upper_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetEndCumulVarSoftUpperBound(swigCPtr, this, vehicle, upper_bound, coefficient);
  }

  public void SetCumulVarSoftUpperBoundFromIndex(long index, long upper_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetCumulVarSoftUpperBoundFromIndex(swigCPtr, this, index, upper_bound, coefficient);
  }

  public boolean HasCumulVarSoftUpperBound(int node) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasCumulVarSoftUpperBound(swigCPtr, this, node);
  }

  public boolean HasStartCumulVarSoftUpperBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasStartCumulVarSoftUpperBound(swigCPtr, this, vehicle);
  }

  public boolean HasEndCumulVarSoftUpperBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasEndCumulVarSoftUpperBound(swigCPtr, this, vehicle);
  }

  public boolean HasCumulVarSoftUpperBoundFromIndex(long index) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasCumulVarSoftUpperBoundFromIndex(swigCPtr, this, index);
  }

  public long getCumulVarSoftUpperBound(int node) {
    return operations_research_constraint_solverJNI.RoutingDimension_getCumulVarSoftUpperBound(swigCPtr, this, node);
  }

  public long GetStartCumulVarSoftUpperBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetStartCumulVarSoftUpperBound(swigCPtr, this, vehicle);
  }

  public long GetEndCumulVarSoftUpperBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetEndCumulVarSoftUpperBound(swigCPtr, this, vehicle);
  }

  public long GetCumulVarSoftUpperBoundFromIndex(long index) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetCumulVarSoftUpperBoundFromIndex(swigCPtr, this, index);
  }

  public long getCumulVarSoftUpperBoundCoefficient(int node) {
    return operations_research_constraint_solverJNI.RoutingDimension_getCumulVarSoftUpperBoundCoefficient(swigCPtr, this, node);
  }

  public long GetStartCumulVarSoftUpperBoundCoefficient(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetStartCumulVarSoftUpperBoundCoefficient(swigCPtr, this, vehicle);
  }

  public long GetEndCumulVarSoftUpperBoundCoefficient(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetEndCumulVarSoftUpperBoundCoefficient(swigCPtr, this, vehicle);
  }

  public long GetCumulVarSoftUpperBoundCoefficientFromIndex(long index) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetCumulVarSoftUpperBoundCoefficientFromIndex(swigCPtr, this, index);
  }

  public void SetCumulVarSoftLowerBound(int node, long lower_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetCumulVarSoftLowerBound(swigCPtr, this, node, lower_bound, coefficient);
  }

  public void SetStartCumulVarSoftLowerBound(int vehicle, long lower_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetStartCumulVarSoftLowerBound(swigCPtr, this, vehicle, lower_bound, coefficient);
  }

  public void SetEndCumulVarSoftLowerBound(int vehicle, long lower_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetEndCumulVarSoftLowerBound(swigCPtr, this, vehicle, lower_bound, coefficient);
  }

  public void SetCumulVarSoftLowerBoundFromIndex(long index, long lower_bound, long coefficient) {
    operations_research_constraint_solverJNI.RoutingDimension_SetCumulVarSoftLowerBoundFromIndex(swigCPtr, this, index, lower_bound, coefficient);
  }

  public boolean HasCumulVarSoftLowerBound(int node) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasCumulVarSoftLowerBound(swigCPtr, this, node);
  }

  public boolean HasStartCumulVarSoftLowerBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasStartCumulVarSoftLowerBound(swigCPtr, this, vehicle);
  }

  public boolean HasEndCumulVarSoftLowerBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasEndCumulVarSoftLowerBound(swigCPtr, this, vehicle);
  }

  public boolean HasCumulVarSoftLowerBoundFromIndex(long index) {
    return operations_research_constraint_solverJNI.RoutingDimension_HasCumulVarSoftLowerBoundFromIndex(swigCPtr, this, index);
  }

  public long GetCumulVarSoftLowerBound(int node) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetCumulVarSoftLowerBound(swigCPtr, this, node);
  }

  public long GetStartCumulVarSoftLowerBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetStartCumulVarSoftLowerBound(swigCPtr, this, vehicle);
  }

  public long GetEndCumulVarSoftLowerBound(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetEndCumulVarSoftLowerBound(swigCPtr, this, vehicle);
  }

  public long GetCumulVarSoftLowerBoundFromIndex(long index) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetCumulVarSoftLowerBoundFromIndex(swigCPtr, this, index);
  }

  public long GetCumulVarSoftLowerBoundCoefficient(int node) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetCumulVarSoftLowerBoundCoefficient(swigCPtr, this, node);
  }

  public long GetStartCumulVarSoftLowerBoundCoefficient(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetStartCumulVarSoftLowerBoundCoefficient(swigCPtr, this, vehicle);
  }

  public long GetEndCumulVarSoftLowerBoundCoefficient(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetEndCumulVarSoftLowerBoundCoefficient(swigCPtr, this, vehicle);
  }

  public long GetCumulVarSoftLowerBoundCoefficientFromIndex(long index) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetCumulVarSoftLowerBoundCoefficientFromIndex(swigCPtr, this, index);
  }

  public void SetBreakIntervalsOfVehicle(SWIGTYPE_p_std__vectorT_operations_research__IntervalVar_p_t breaks, int vehicle) {
    operations_research_constraint_solverJNI.RoutingDimension_SetBreakIntervalsOfVehicle(swigCPtr, this, SWIGTYPE_p_std__vectorT_operations_research__IntervalVar_p_t.getCPtr(breaks), vehicle);
  }

  public RoutingDimension base_dimension() {
    long cPtr = operations_research_constraint_solverJNI.RoutingDimension_base_dimension(swigCPtr, this);
    return (cPtr == 0) ? null : new RoutingDimension(cPtr, false);
  }

  public long ShortestTransitionSlack(long node) {
    return operations_research_constraint_solverJNI.RoutingDimension_ShortestTransitionSlack(swigCPtr, this, node);
  }

  public String name() {
    return operations_research_constraint_solverJNI.RoutingDimension_name(swigCPtr, this);
  }

  public long GetSpanUpperBoundForVehicle(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_GetSpanUpperBoundForVehicle(swigCPtr, this, vehicle);
  }

  public long getSpanCostCoefficientForVehicle(int vehicle) {
    return operations_research_constraint_solverJNI.RoutingDimension_getSpanCostCoefficientForVehicle(swigCPtr, this, vehicle);
  }

  public long getGlobalSpanCostCoefficient() {
    return operations_research_constraint_solverJNI.RoutingDimension_getGlobalSpanCostCoefficient(swigCPtr, this);
  }

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.ortools.constraintsolver;

public class operations_research_constraint_solverJNI {
  public final static native long new_IntTupleSet__SWIG_0(int jarg1);
  public final static native long new_IntTupleSet__SWIG_1(long jarg1, IntTupleSet jarg1_);
  public final static native void delete_IntTupleSet(long jarg1);
  public final static native void IntTupleSet_clear(long jarg1, IntTupleSet jarg1_);
  public final static native int IntTupleSet_insert__SWIG_0(long jarg1, IntTupleSet jarg1_, int[] jarg2);
  public final static native int IntTupleSet_insert__SWIG_1(long jarg1, IntTupleSet jarg1_, long[] jarg2);
  public final static native int IntTupleSet_insert2(long jarg1, IntTupleSet jarg1_, long jarg2, long jarg3);
  public final static native int IntTupleSet_insert3(long jarg1, IntTupleSet jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native int IntTupleSet_insert4(long jarg1, IntTupleSet jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native void IntTupleSet_insertAll__SWIG_0(long jarg1, IntTupleSet jarg1_, long[][] jarg2);
  public final static native void IntTupleSet_insertAll__SWIG_1(long jarg1, IntTupleSet jarg1_, long jarg2);
  public final static native boolean IntTupleSet_contains__SWIG_0(long jarg1, IntTupleSet jarg1_, int[] jarg2);
  public final static native boolean IntTupleSet_contains__SWIG_1(long jarg1, IntTupleSet jarg1_, long[] jarg2);
  public final static native int IntTupleSet_numTuples(long jarg1, IntTupleSet jarg1_);
  public final static native long IntTupleSet_value(long jarg1, IntTupleSet jarg1_, int jarg2, int jarg3);
  public final static native int IntTupleSet_arity(long jarg1, IntTupleSet jarg1_);
  public final static native long IntTupleSet_rawData(long jarg1, IntTupleSet jarg1_);
  public final static native int IntTupleSet_NumDifferentValuesInColumn(long jarg1, IntTupleSet jarg1_, int jarg2);
  public final static native long IntTupleSet_SortedByColumn(long jarg1, IntTupleSet jarg1_, int jarg2);
  public final static native long IntTupleSet_SortedLexicographically(long jarg1, IntTupleSet jarg1_);
  public final static native void delete_LongToLong(long jarg1);
  public final static native long LongToLong_run(long jarg1, LongToLong jarg1_, long jarg2);
  public final static native long new_LongToLong();
  public final static native void LongToLong_director_connect(LongToLong obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LongToLong_change_ownership(LongToLong obj, long cptr, boolean take_or_release);
  public final static native void delete_LongLongToLong(long jarg1);
  public final static native long LongLongToLong_run(long jarg1, LongLongToLong jarg1_, long jarg2, long jarg3);
  public final static native long new_LongLongToLong();
  public final static native void LongLongToLong_director_connect(LongLongToLong obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LongLongToLong_change_ownership(LongLongToLong obj, long cptr, boolean take_or_release);
  public final static native void delete_IntIntToLong(long jarg1);
  public final static native long IntIntToLong_run(long jarg1, IntIntToLong jarg1_, int jarg2, int jarg3);
  public final static native long new_IntIntToLong();
  public final static native void IntIntToLong_director_connect(IntIntToLong obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IntIntToLong_change_ownership(IntIntToLong obj, long cptr, boolean take_or_release);
  public final static native void delete_LongLongLongToLong(long jarg1);
  public final static native long LongLongLongToLong_run(long jarg1, LongLongLongToLong jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long new_LongLongLongToLong();
  public final static native void LongLongLongToLong_director_connect(LongLongLongToLong obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LongLongLongToLong_change_ownership(LongLongLongToLong obj, long cptr, boolean take_or_release);
  public final static native void delete_LongToBoolean(long jarg1);
  public final static native boolean LongToBoolean_run(long jarg1, LongToBoolean jarg1_, long jarg2);
  public final static native long new_LongToBoolean();
  public final static native void LongToBoolean_director_connect(LongToBoolean obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LongToBoolean_change_ownership(LongToBoolean obj, long cptr, boolean take_or_release);
  public final static native void delete_VoidToString(long jarg1);
  public final static native String VoidToString_run(long jarg1, VoidToString jarg1_);
  public final static native long new_VoidToString();
  public final static native void VoidToString_director_connect(VoidToString obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void VoidToString_change_ownership(VoidToString obj, long cptr, boolean take_or_release);
  public final static native void delete_VoidToBoolean(long jarg1);
  public final static native boolean VoidToBoolean_run(long jarg1, VoidToBoolean jarg1_);
  public final static native long new_VoidToBoolean();
  public final static native void VoidToBoolean_director_connect(VoidToBoolean obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void VoidToBoolean_change_ownership(VoidToBoolean obj, long cptr, boolean take_or_release);
  public final static native void delete_LongLongLongToBoolean(long jarg1);
  public final static native boolean LongLongLongToBoolean_run(long jarg1, LongLongLongToBoolean jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long new_LongLongLongToBoolean();
  public final static native void LongLongLongToBoolean_director_connect(LongLongLongToBoolean obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LongLongLongToBoolean_change_ownership(LongLongLongToBoolean obj, long cptr, boolean take_or_release);
  public final static native void delete_LongToVoid(long jarg1);
  public final static native void LongToVoid_run(long jarg1, LongToVoid jarg1_, long jarg2);
  public final static native long new_LongToVoid();
  public final static native void LongToVoid_director_connect(LongToVoid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LongToVoid_change_ownership(LongToVoid obj, long cptr, boolean take_or_release);
  public final static native void delete_VoidToVoid(long jarg1);
  public final static native void VoidToVoid_run(long jarg1, VoidToVoid jarg1_);
  public final static native long new_VoidToVoid();
  public final static native void VoidToVoid_director_connect(VoidToVoid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void VoidToVoid_change_ownership(VoidToVoid obj, long cptr, boolean take_or_release);
  public final static native int DefaultPhaseParameters_CHOOSE_MAX_SUM_IMPACT_get();
  public final static native int DefaultPhaseParameters_CHOOSE_MAX_AVERAGE_IMPACT_get();
  public final static native int DefaultPhaseParameters_CHOOSE_MAX_VALUE_IMPACT_get();
  public final static native int DefaultPhaseParameters_SELECT_MIN_IMPACT_get();
  public final static native int DefaultPhaseParameters_SELECT_MAX_IMPACT_get();
  public final static native int DefaultPhaseParameters_NONE_get();
  public final static native int DefaultPhaseParameters_NORMAL_get();
  public final static native int DefaultPhaseParameters_VERBOSE_get();
  public final static native void DefaultPhaseParameters_var_selection_schema_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_var_selection_schema_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_value_selection_schema_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_value_selection_schema_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_initialization_splits_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_initialization_splits_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_run_all_heuristics_set(long jarg1, DefaultPhaseParameters jarg1_, boolean jarg2);
  public final static native boolean DefaultPhaseParameters_run_all_heuristics_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_heuristic_period_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_heuristic_period_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_heuristic_num_failures_limit_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_heuristic_num_failures_limit_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_persistent_impact_set(long jarg1, DefaultPhaseParameters jarg1_, boolean jarg2);
  public final static native boolean DefaultPhaseParameters_persistent_impact_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_random_seed_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_random_seed_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_restart_log_size_set(long jarg1, DefaultPhaseParameters jarg1_, double jarg2);
  public final static native double DefaultPhaseParameters_restart_log_size_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_display_level_set(long jarg1, DefaultPhaseParameters jarg1_, int jarg2);
  public final static native int DefaultPhaseParameters_display_level_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_use_no_goods_set(long jarg1, DefaultPhaseParameters jarg1_, boolean jarg2);
  public final static native boolean DefaultPhaseParameters_use_no_goods_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_use_last_conflict_set(long jarg1, DefaultPhaseParameters jarg1_, boolean jarg2);
  public final static native boolean DefaultPhaseParameters_use_last_conflict_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native void DefaultPhaseParameters_decision_builder_set(long jarg1, DefaultPhaseParameters jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native long DefaultPhaseParameters_decision_builder_get(long jarg1, DefaultPhaseParameters jarg1_);
  public final static native long new_DefaultPhaseParameters();
  public final static native void delete_DefaultPhaseParameters(long jarg1);
  public final static native long new_Solver_IntegerCastInfo__SWIG_0();
  public final static native long new_Solver_IntegerCastInfo__SWIG_1(long jarg1, IntVar jarg1_, long jarg2, IntExpr jarg2_, long jarg3, Constraint jarg3_);
  public final static native void Solver_IntegerCastInfo_variable_set(long jarg1, Solver.IntegerCastInfo jarg1_, long jarg2, IntVar jarg2_);
  public final static native long Solver_IntegerCastInfo_variable_get(long jarg1, Solver.IntegerCastInfo jarg1_);
  public final static native void Solver_IntegerCastInfo_expression_set(long jarg1, Solver.IntegerCastInfo jarg1_, long jarg2, IntExpr jarg2_);
  public final static native long Solver_IntegerCastInfo_expression_get(long jarg1, Solver.IntegerCastInfo jarg1_);
  public final static native void Solver_IntegerCastInfo_maintainer_set(long jarg1, Solver.IntegerCastInfo jarg1_, long jarg2, Constraint jarg2_);
  public final static native long Solver_IntegerCastInfo_maintainer_get(long jarg1, Solver.IntegerCastInfo jarg1_);
  public final static native void delete_Solver_IntegerCastInfo(long jarg1);
  public final static native int Solver_kNumPriorities_get();
  public final static native int Solver_INT_VAR_DEFAULT_get();
  public final static native int Solver_INT_VAR_SIMPLE_get();
  public final static native int Solver_CHOOSE_FIRST_UNBOUND_get();
  public final static native int Solver_CHOOSE_RANDOM_get();
  public final static native int Solver_CHOOSE_MIN_SIZE_LOWEST_MIN_get();
  public final static native int Solver_CHOOSE_MIN_SIZE_HIGHEST_MIN_get();
  public final static native int Solver_CHOOSE_MIN_SIZE_LOWEST_MAX_get();
  public final static native int Solver_CHOOSE_MIN_SIZE_HIGHEST_MAX_get();
  public final static native int Solver_CHOOSE_LOWEST_MIN_get();
  public final static native int Solver_CHOOSE_HIGHEST_MAX_get();
  public final static native int Solver_CHOOSE_MIN_SIZE_get();
  public final static native int Solver_CHOOSE_MAX_SIZE_get();
  public final static native int Solver_CHOOSE_MAX_REGRET_ON_MIN_get();
  public final static native int Solver_CHOOSE_PATH_get();
  public final static native int Solver_INT_VALUE_DEFAULT_get();
  public final static native int Solver_INT_VALUE_SIMPLE_get();
  public final static native int Solver_ASSIGN_MIN_VALUE_get();
  public final static native int Solver_ASSIGN_MAX_VALUE_get();
  public final static native int Solver_ASSIGN_RANDOM_VALUE_get();
  public final static native int Solver_ASSIGN_CENTER_VALUE_get();
  public final static native int Solver_SPLIT_LOWER_HALF_get();
  public final static native int Solver_SPLIT_UPPER_HALF_get();
  public final static native int Solver_CHOOSE_STATIC_GLOBAL_BEST_get();
  public final static native int Solver_CHOOSE_DYNAMIC_GLOBAL_BEST_get();
  public final static native int Solver_SEQUENCE_DEFAULT_get();
  public final static native int Solver_SEQUENCE_SIMPLE_get();
  public final static native int Solver_CHOOSE_MIN_SLACK_RANK_FORWARD_get();
  public final static native int Solver_CHOOSE_RANDOM_RANK_FORWARD_get();
  public final static native int Solver_INTERVAL_DEFAULT_get();
  public final static native int Solver_INTERVAL_SIMPLE_get();
  public final static native int Solver_INTERVAL_SET_TIMES_FORWARD_get();
  public final static native int Solver_INTERVAL_SET_TIMES_BACKWARD_get();
  public final static native int Solver_TWOOPT_get();
  public final static native int Solver_OROPT_get();
  public final static native int Solver_RELOCATE_get();
  public final static native int Solver_EXCHANGE_get();
  public final static native int Solver_CROSS_get();
  public final static native int Solver_MAKEACTIVE_get();
  public final static native int Solver_MAKEINACTIVE_get();
  public final static native int Solver_MAKECHAININACTIVE_get();
  public final static native int Solver_SWAPACTIVE_get();
  public final static native int Solver_EXTENDEDSWAPACTIVE_get();
  public final static native int Solver_PATHLNS_get();
  public final static native int Solver_FULLPATHLNS_get();
  public final static native int Solver_UNACTIVELNS_get();
  public final static native int Solver_INCREMENT_get();
  public final static native int Solver_DECREMENT_get();
  public final static native int Solver_SIMPLELNS_get();
  public final static native int Solver_LK_get();
  public final static native int Solver_TSPOPT_get();
  public final static native int Solver_TSPLNS_get();
  public final static native int Solver_GE_get();
  public final static native int Solver_LE_get();
  public final static native int Solver_EQ_get();
  public final static native int Solver_SUM_get();
  public final static native int Solver_PROD_get();
  public final static native int Solver_MAX_get();
  public final static native int Solver_MIN_get();
  public final static native int Solver_DELAYED_PRIORITY_get();
  public final static native int Solver_VAR_PRIORITY_get();
  public final static native int Solver_NORMAL_PRIORITY_get();
  public final static native int Solver_ENDS_AFTER_END_get();
  public final static native int Solver_ENDS_AFTER_START_get();
  public final static native int Solver_ENDS_AT_END_get();
  public final static native int Solver_ENDS_AT_START_get();
  public final static native int Solver_STARTS_AFTER_END_get();
  public final static native int Solver_STARTS_AFTER_START_get();
  public final static native int Solver_STARTS_AT_END_get();
  public final static native int Solver_STARTS_AT_START_get();
  public final static native int Solver_STAYS_IN_SYNC_get();
  public final static native int Solver_ENDS_AFTER_get();
  public final static native int Solver_ENDS_AT_get();
  public final static native int Solver_ENDS_BEFORE_get();
  public final static native int Solver_STARTS_AFTER_get();
  public final static native int Solver_STARTS_AT_get();
  public final static native int Solver_STARTS_BEFORE_get();
  public final static native int Solver_CROSS_DATE_get();
  public final static native int Solver_AVOID_DATE_get();
  public final static native int Solver_NO_CHANGE_get();
  public final static native int Solver_KEEP_LEFT_get();
  public final static native int Solver_KEEP_RIGHT_get();
  public final static native int Solver_KILL_BOTH_get();
  public final static native int Solver_SWITCH_BRANCHES_get();
  public final static native int Solver_SENTINEL_get();
  public final static native int Solver_SIMPLE_MARKER_get();
  public final static native int Solver_CHOICE_POINT_get();
  public final static native int Solver_REVERSIBLE_ACTION_get();
  public final static native int Solver_OUTSIDE_SEARCH_get();
  public final static native int Solver_IN_ROOT_NODE_get();
  public final static native int Solver_IN_SEARCH_get();
  public final static native int Solver_AT_SOLUTION_get();
  public final static native int Solver_NO_MORE_SOLUTIONS_get();
  public final static native int Solver_PROBLEM_INFEASIBLE_get();
  public final static native long new_Solver__SWIG_0(String jarg1);
  public final static native long new_Solver__SWIG_1(String jarg1, byte[] jarg2);
  public final static native void delete_Solver(long jarg1);
  public final static native byte[] Solver_parameters(long jarg1, Solver jarg1_);
  public final static native byte[] Solver_defaultSolverParameters();
  public final static native void Solver_addConstraint(long jarg1, Solver jarg1_, long jarg2, Constraint jarg2_);
  public final static native void Solver_AddCastConstraint(long jarg1, Solver jarg1_, long jarg2, CastConstraint jarg2_, long jarg3, IntVar jarg3_, long jarg4, IntExpr jarg4_);
  public final static native boolean Solver_solve__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, SearchMonitor[] jarg3);
  public final static native boolean Solver_solve__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native boolean Solver_solve__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_);
  public final static native boolean Solver_solve__SWIG_3(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_);
  public final static native boolean Solver_solve__SWIG_4(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_);
  public final static native boolean Solver_solve__SWIG_5(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_, long jarg6, SearchMonitor jarg6_);
  public final static native void Solver_newSearch__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, SearchMonitor[] jarg3);
  public final static native void Solver_newSearch__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native void Solver_newSearch__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_);
  public final static native void Solver_newSearch__SWIG_3(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_);
  public final static native void Solver_newSearch__SWIG_4(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_);
  public final static native void Solver_newSearch__SWIG_5(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_, long jarg6, SearchMonitor jarg6_);
  public final static native boolean Solver_nextSolution(long jarg1, Solver jarg1_);
  public final static native void Solver_RestartSearch(long jarg1, Solver jarg1_);
  public final static native void Solver_endSearch(long jarg1, Solver jarg1_);
  public final static native boolean Solver_solveAndCommit__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, SearchMonitor[] jarg3);
  public final static native boolean Solver_solveAndCommit__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native boolean Solver_solveAndCommit__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_);
  public final static native boolean Solver_solveAndCommit__SWIG_3(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_);
  public final static native boolean Solver_solveAndCommit__SWIG_4(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_);
  public final static native boolean Solver_checkAssignment(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native boolean Solver_CheckConstraint(long jarg1, Solver jarg1_, long jarg2, Constraint jarg2_);
  public final static native int Solver_state(long jarg1, Solver jarg1_);
  public final static native void Solver_fail(long jarg1, Solver jarg1_);
  public final static native long Solver_ExportModel(long jarg1, Solver jarg1_);
  public final static native long Solver_ExportModelWithSearchMonitors(long jarg1, Solver jarg1_, SearchMonitor[] jarg2);
  public final static native long Solver_ExportModelWithSearchMonitorsAndDecisionBuilder(long jarg1, Solver jarg1_, SearchMonitor[] jarg2, long jarg3, DecisionBuilder jarg3_);
  public final static native boolean Solver_LoadModel(long jarg1, Solver jarg1_, long jarg2);
  public final static native boolean Solver_LoadModelWithSearchMonitors(long jarg1, Solver jarg1_, long jarg2, long jarg3);
  public final static native boolean Solver_UpgradeModel(long jarg1);
  public final static native long Solver_model_loader(long jarg1, Solver jarg1_);
  public final static native String Solver_toString(long jarg1, Solver jarg1_);
  public final static native long Solver_MemoryUsage();
  public final static native long Solver_wallTime(long jarg1, Solver jarg1_);
  public final static native long Solver_branches(long jarg1, Solver jarg1_);
  public final static native long Solver_solutions(long jarg1, Solver jarg1_);
  public final static native long Solver_demon_runs(long jarg1, Solver jarg1_, int jarg2);
  public final static native long Solver_failures(long jarg1, Solver jarg1_);
  public final static native long Solver_neighbors(long jarg1, Solver jarg1_);
  public final static native long Solver_filteredNeighbors(long jarg1, Solver jarg1_);
  public final static native long Solver_acceptedNeighbors(long jarg1, Solver jarg1_);
  public final static native java.math.BigInteger Solver_stamp(long jarg1, Solver jarg1_);
  public final static native java.math.BigInteger Solver_fail_stamp(long jarg1, Solver jarg1_);
  public final static native long Solver_makeIntVar__SWIG_0(long jarg1, Solver jarg1_, long jarg2, long jarg3, String jarg4);
  public final static native long Solver_makeIntVar__SWIG_1(long jarg1, Solver jarg1_, long[] jarg2, String jarg3);
  public final static native long Solver_makeIntVar__SWIG_2(long jarg1, Solver jarg1_, int[] jarg2, String jarg3);
  public final static native long Solver_makeIntVar__SWIG_3(long jarg1, Solver jarg1_, long jarg2, long jarg3);
  public final static native long Solver_makeIntVar__SWIG_4(long jarg1, Solver jarg1_, long[] jarg2);
  public final static native long Solver_makeIntVar__SWIG_5(long jarg1, Solver jarg1_, int[] jarg2);
  public final static native long Solver_makeBoolVar__SWIG_0(long jarg1, Solver jarg1_, String jarg2);
  public final static native long Solver_makeBoolVar__SWIG_1(long jarg1, Solver jarg1_);
  public final static native long Solver_makeIntConst__SWIG_0(long jarg1, Solver jarg1_, long jarg2, String jarg3);
  public final static native long Solver_makeIntConst__SWIG_1(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_makeSum__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeSum__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeSum__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_makeScalProd__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3);
  public final static native long Solver_makeScalProd__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3);
  public final static native long Solver_makeDifference__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeDifference__SWIG_1(long jarg1, Solver jarg1_, long jarg2, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeOpposite(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_);
  public final static native long Solver_makeProd__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeProd__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeDiv__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeDiv__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeAbs(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_);
  public final static native long Solver_makeSquare(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_);
  public final static native long Solver_MakePower(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeElement__SWIG_0(long jarg1, Solver jarg1_, long[] jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_makeElement__SWIG_1(long jarg1, Solver jarg1_, int[] jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_makeElement__SWIG_2(long jarg1, Solver jarg1_, LongToLong jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_MakeMonotonicElement(long jarg1, Solver jarg1_, LongToLong jarg2, boolean jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeElement__SWIG_3(long jarg1, Solver jarg1_, LongLongToLong jarg2, long jarg3, IntVar jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeElement__SWIG_4(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_MakeIndexExpression(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3);
  public final static native long Solver_MakeIfThenElseCt(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntExpr jarg4_, long jarg5, IntVar jarg5_);
  public final static native long Solver_makeMin__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_makeMin__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeMin__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeMin__SWIG_3(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeMax__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_makeMax__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeMax__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeMax__SWIG_3(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeConvexPiecewiseExpr(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long Solver_makeSemiContinuousExpr(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeModulo__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_MakeModulo__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_MakeConditionalExpression(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntExpr jarg3_, long jarg4);
  public final static native long Solver_makeTrueConstraint(long jarg1, Solver jarg1_);
  public final static native long Solver_makeFalseConstraint__SWIG_0(long jarg1, Solver jarg1_);
  public final static native long Solver_makeFalseConstraint__SWIG_1(long jarg1, Solver jarg1_, String jarg2);
  public final static native long Solver_makeIsEqualCstCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsEqualCstVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeIsEqualVar__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsEqualVar__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeEquality__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeEquality__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeEquality__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeIsDifferentCstCt__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsDifferentCstVar__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeIsDifferentCstVar__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeIsDifferentCstCt__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeNonEquality__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeNonEquality__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeNonEquality__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeIsLessOrEqualCstCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsLessOrEqualCstVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeIsLessOrEqualVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeIsLessOrEqualCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeLessOrEqual__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeLessOrEqual__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeLessOrEqual__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeIsGreaterOrEqualCstCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsGreaterOrEqualCstVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeIsGreaterOrEqualVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeIsGreaterOrEqualCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeGreaterOrEqual__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeGreaterOrEqual__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeGreaterOrEqual__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeIsGreaterCstCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsGreaterCstVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeIsGreaterVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeIsGreaterCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeGreater__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeGreater__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeGreater__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeIsLessCstCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsLessCstVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeIsLessVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeIsLessCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeLess__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_);
  public final static native long Solver_makeLess__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native long Solver_makeLess__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native long Solver_makeSumLessOrEqual(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3);
  public final static native long Solver_makeSumGreaterOrEqual(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3);
  public final static native long Solver_makeSumEquality__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3);
  public final static native long Solver_makeSumEquality__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_makeScalProdEquality__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long jarg4);
  public final static native long Solver_makeScalProdEquality__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, long jarg4);
  public final static native long Solver_makeScalProdEquality__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeScalProdEquality__SWIG_3(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeScalProdGreaterOrEqual__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long jarg4);
  public final static native long Solver_makeScalProdGreaterOrEqual__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, long jarg4);
  public final static native long Solver_makeScalProdLessOrEqual__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long jarg4);
  public final static native long Solver_makeScalProdLessOrEqual__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, long jarg4);
  public final static native long Solver_MakeMinEquality(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_MakeMaxEquality(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_MakeElementEquality__SWIG_0(long jarg1, Solver jarg1_, long[] jarg2, long jarg3, IntVar jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_MakeElementEquality__SWIG_1(long jarg1, Solver jarg1_, int[] jarg2, long jarg3, IntVar jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_MakeElementEquality__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_MakeElementEquality__SWIG_3(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_, long jarg4);
  public final static native long Solver_MakeAbsEquality(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntVar jarg3_);
  public final static native long Solver_MakeIndexOfConstraint(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_, long jarg4);
  public final static native long Solver_MakeConstraintInitialPropagateCallback(long jarg1, Solver jarg1_, long jarg2, Constraint jarg2_);
  public final static native long Solver_MakeDelayedConstraintInitialPropagateCallback(long jarg1, Solver jarg1_, long jarg2, Constraint jarg2_);
  public final static native long Solver_makeClosureDemon(long jarg1, Solver jarg1_, VoidToVoid jarg2);
  public final static native long Solver_makeBetweenCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeNotBetweenCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4);
  public final static native long Solver_makeIsBetweenCt(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4, long jarg5, IntVar jarg5_);
  public final static native long Solver_MakeIsBetweenVar(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4);
  public final static native long Solver_makeMemberCt__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long[] jarg3);
  public final static native long Solver_makeMemberCt__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int[] jarg3);
  public final static native long Solver_MakeNotMemberCt__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long[] jarg3);
  public final static native long Solver_MakeNotMemberCt__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int[] jarg3);
  public final static native long Solver_MakeNotMemberCt__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long[] jarg3, long[] jarg4);
  public final static native long Solver_MakeNotMemberCt__SWIG_3(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int[] jarg3, int[] jarg4);
  public final static native long Solver_makeIsMemberCt__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long[] jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsMemberCt__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int[] jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeIsMemberVar__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, long[] jarg3);
  public final static native long Solver_makeIsMemberVar__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_, int[] jarg3);
  public final static native long Solver_MakeAtMost(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long Solver_makeCount__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, long jarg4);
  public final static native long Solver_makeCount__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeDistribute__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, IntVar[] jarg4);
  public final static native long Solver_makeDistribute__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, IntVar[] jarg4);
  public final static native long Solver_makeDistribute__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_makeDistribute__SWIG_3(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long Solver_makeDistribute__SWIG_4(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long[] jarg4);
  public final static native long Solver_makeDistribute__SWIG_5(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, int[] jarg4);
  public final static native long Solver_makeDistribute__SWIG_6(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long[] jarg4, long[] jarg5);
  public final static native long Solver_makeDistribute__SWIG_7(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, int[] jarg4, int[] jarg5);
  public final static native long Solver_makeDeviation(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntVar jarg3_, long jarg4);
  public final static native long Solver_makeAllDifferent__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_makeAllDifferent__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, boolean jarg3);
  public final static native long Solver_MakeAllDifferentExcept(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3);
  public final static native long Solver_makeSortingConstraint(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_MakeLexicalLess(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_MakeLexicalLessOrEqual(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_MakeInversePermutationConstraint(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_MakeIndexOfFirstMaxValueConstraint(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, IntVar[] jarg3);
  public final static native long Solver_MakeIndexOfFirstMinValueConstraint(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, IntVar[] jarg3);
  public final static native long Solver_MakeNullIntersect(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_MakeNullIntersectExcept(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, long jarg4);
  public final static native long Solver_makeNoCycle__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, LongToBoolean jarg4);
  public final static native long Solver_makeNoCycle__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3);
  public final static native long Solver_makeNoCycle__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, LongToBoolean jarg4, boolean jarg5);
  public final static native long Solver_MakeCircuit(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_MakeSubCircuit(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_makePathCumul__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, IntVar[] jarg4, IntVar[] jarg5);
  public final static native long Solver_MakeDelayedPathCumul(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, IntVar[] jarg4, IntVar[] jarg5);
  public final static native long Solver_makePathCumul__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, IntVar[] jarg4, LongLongToLong jarg5);
  public final static native long Solver_makePathCumul__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, IntVar[] jarg4, IntVar[] jarg5, LongLongToLong jarg6);
  public final static native long Solver_MakePathConnected(long jarg1, Solver jarg1_, long jarg2, long[] jarg3, long[] jarg4, long jarg5);
  public final static native long Solver_makeMapDomain(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, IntVar[] jarg3);
  public final static native long Solver_makeAllowedAssignment(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntTupleSet jarg3_);
  public final static native long Solver_makeTransitionConstraint__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntTupleSet jarg3_, long jarg4, long[] jarg5);
  public final static native long Solver_makeTransitionConstraint__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, IntTupleSet jarg3_, long jarg4, int[] jarg5);
  public final static native long Solver_MakeNonOverlappingBoxesConstraint__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, IntVar[] jarg4, IntVar[] jarg5);
  public final static native long Solver_MakeNonOverlappingBoxesConstraint__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, long[] jarg4, long[] jarg5);
  public final static native long Solver_MakeNonOverlappingBoxesConstraint__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, int[] jarg4, int[] jarg5);
  public final static native long Solver_MakeNonOverlappingNonStrictBoxesConstraint__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, IntVar[] jarg4, IntVar[] jarg5);
  public final static native long Solver_MakeNonOverlappingNonStrictBoxesConstraint__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, long[] jarg4, long[] jarg5);
  public final static native long Solver_MakeNonOverlappingNonStrictBoxesConstraint__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, int[] jarg4, int[] jarg5);
  public final static native long Solver_makePack(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3);
  public final static native long Solver_makeFixedDurationIntervalVar__SWIG_0(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4, boolean jarg5, String jarg6);
  public final static native long Solver_makeFixedDurationIntervalVar__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, String jarg4);
  public final static native long Solver_makeFixedDurationIntervalVar__SWIG_2(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4, IntVar jarg4_, String jarg5);
  public final static native long Solver_makeFixedInterval(long jarg1, Solver jarg1_, long jarg2, long jarg3, String jarg4);
  public final static native long Solver_MakeIntervalVar(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, boolean jarg8, String jarg9);
  public final static native void Solver_MakeIntervalVarArray(long jarg1, Solver jarg1_, int jarg2, long jarg3, long jarg4, long jarg5, long jarg6, long jarg7, long jarg8, boolean jarg9, String jarg10, long jarg11);
  public final static native long Solver_makeMirrorInterval(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Solver_MakeFixedDurationStartSyncedOnStartIntervalVar(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeFixedDurationStartSyncedOnEndIntervalVar(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeFixedDurationEndSyncedOnStartIntervalVar(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeFixedDurationEndSyncedOnEndIntervalVar(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeIntervalRelaxedMin(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Solver_MakeIntervalRelaxedMax(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Solver_makeIntervalVarRelation__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, int jarg3, long jarg4);
  public final static native long Solver_makeIntervalVarRelation__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, int jarg3, long jarg4, IntervalVar jarg4_);
  public final static native long Solver_makeIntervalVarRelationWithDelay(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, int jarg3, long jarg4, IntervalVar jarg4_, long jarg5);
  public final static native long Solver_makeTemporalDisjunction__SWIG_0(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, IntervalVar jarg3_, long jarg4, IntVar jarg4_);
  public final static native long Solver_makeTemporalDisjunction__SWIG_1(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, IntervalVar jarg3_);
  public final static native long Solver_makeDisjunctiveConstraint(long jarg1, Solver jarg1_, IntervalVar[] jarg2, String jarg3);
  public final static native long Solver_MakeStrictDisjunctiveConstraint(long jarg1, Solver jarg1_, IntervalVar[] jarg2, String jarg3);
  public final static native long Solver_makeCumulative__SWIG_0(long jarg1, Solver jarg1_, IntervalVar[] jarg2, long[] jarg3, long jarg4, String jarg5);
  public final static native long Solver_makeCumulative__SWIG_1(long jarg1, Solver jarg1_, IntervalVar[] jarg2, int[] jarg3, long jarg4, String jarg5);
  public final static native long Solver_makeCumulative__SWIG_2(long jarg1, Solver jarg1_, IntervalVar[] jarg2, long[] jarg3, long jarg4, IntVar jarg4_, String jarg5);
  public final static native long Solver_makeCumulative__SWIG_3(long jarg1, Solver jarg1_, IntervalVar[] jarg2, int[] jarg3, long jarg4, IntVar jarg4_, String jarg5);
  public final static native long Solver_makeCumulative__SWIG_4(long jarg1, Solver jarg1_, IntervalVar[] jarg2, IntVar[] jarg3, long jarg4, String jarg5);
  public final static native long Solver_makeCumulative__SWIG_5(long jarg1, Solver jarg1_, IntervalVar[] jarg2, IntVar[] jarg3, long jarg4, IntVar jarg4_, String jarg5);
  public final static native long Solver_MakeCover(long jarg1, Solver jarg1_, IntervalVar[] jarg2, long jarg3, IntervalVar jarg3_);
  public final static native long Solver_makeEquality__SWIG_3(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, IntervalVar jarg3_);
  public final static native long Solver_makeAssignment__SWIG_0(long jarg1, Solver jarg1_);
  public final static native long Solver_makeAssignment__SWIG_1(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_makeFirstSolutionCollector__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_makeFirstSolutionCollector__SWIG_1(long jarg1, Solver jarg1_);
  public final static native long Solver_makeLastSolutionCollector__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_makeLastSolutionCollector__SWIG_1(long jarg1, Solver jarg1_);
  public final static native long Solver_makeBestValueSolutionCollector__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_, boolean jarg3);
  public final static native long Solver_makeBestValueSolutionCollector__SWIG_1(long jarg1, Solver jarg1_, boolean jarg2);
  public final static native long Solver_MakeNBestValueSolutionCollector__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_, int jarg3, boolean jarg4);
  public final static native long Solver_MakeNBestValueSolutionCollector__SWIG_1(long jarg1, Solver jarg1_, int jarg2, boolean jarg3);
  public final static native long Solver_makeAllSolutionCollector__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_makeAllSolutionCollector__SWIG_1(long jarg1, Solver jarg1_);
  public final static native long Solver_makeMinimize(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Solver_makeMaximize(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Solver_makeOptimize(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, long jarg4);
  public final static native long Solver_makeWeightedMinimize__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long jarg4);
  public final static native long Solver_makeWeightedMinimize__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, long jarg4);
  public final static native long Solver_makeWeightedMaximize__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3, long jarg4);
  public final static native long Solver_makeWeightedMaximize__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int[] jarg3, long jarg4);
  public final static native long Solver_makeWeightedOptimize__SWIG_0(long jarg1, Solver jarg1_, boolean jarg2, IntVar[] jarg3, long[] jarg4, long jarg5);
  public final static native long Solver_makeWeightedOptimize__SWIG_1(long jarg1, Solver jarg1_, boolean jarg2, IntVar[] jarg3, int[] jarg4, long jarg5);
  public final static native long Solver_makeTabuSearch(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, long jarg4, IntVar[] jarg5, long jarg6, long jarg7, double jarg8);
  public final static native long Solver_MakeGenericTabuSearch(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, long jarg4, IntVar[] jarg5, long jarg6);
  public final static native long Solver_makeSimulatedAnnealing(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, long jarg4, long jarg5);
  public final static native long Solver_makeGuidedLocalSearch__SWIG_0(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, LongLongToLong jarg4, long jarg5, IntVar[] jarg6, double jarg7);
  public final static native long Solver_makeGuidedLocalSearch__SWIG_1(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, LongLongLongToLong jarg4, long jarg5, IntVar[] jarg6, IntVar[] jarg7, double jarg8);
  public final static native long Solver_makeLubyRestart(long jarg1, Solver jarg1_, int jarg2);
  public final static native long Solver_makeConstantRestart(long jarg1, Solver jarg1_, int jarg2);
  public final static native long Solver_makeTimeLimit(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_makeBranchesLimit(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_makeFailuresLimit(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_makeSolutionsLimit(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_makeLimit__SWIG_0(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long Solver_makeLimit__SWIG_1(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, boolean jarg6);
  public final static native long Solver_makeLimit__SWIG_2(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, boolean jarg6, boolean jarg7);
  public final static native long Solver_makeLimit__SWIG_3(long jarg1, Solver jarg1_, byte[] jarg2);
  public final static native byte[] Solver_makeDefaultSearchLimitParameters(long jarg1, Solver jarg1_);
  public final static native long Solver_makeLimit__SWIG_4(long jarg1, Solver jarg1_, long jarg2, SearchLimit jarg2_, long jarg3, SearchLimit jarg3_);
  public final static native void Solver_updateLimits(long jarg1, Solver jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6, SearchLimit jarg6_);
  public final static native long Solver_getTime(long jarg1, Solver jarg1_, long jarg2, SearchLimit jarg2_);
  public final static native long Solver_makeCustomLimit(long jarg1, Solver jarg1_, VoidToBoolean jarg2);
  public final static native long Solver_MakeNoGoodManager(long jarg1, Solver jarg1_);
  public final static native long Solver_makeTreeMonitor__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, String jarg3, String jarg4);
  public final static native long Solver_makeTreeMonitor__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, String jarg3, String jarg4, String jarg5);
  public final static native long Solver_makeSearchLog__SWIG_0(long jarg1, Solver jarg1_, int jarg2);
  public final static native long Solver_makeSearchLog__SWIG_1(long jarg1, Solver jarg1_, int jarg2, long jarg3, IntVar jarg3_);
  public final static native long Solver_makeSearchLog__SWIG_2(long jarg1, Solver jarg1_, int jarg2, VoidToString jarg3);
  public final static native long Solver_makeSearchLog__SWIG_3(long jarg1, Solver jarg1_, int jarg2, long jarg3, IntVar jarg3_, VoidToString jarg4);
  public final static native long Solver_makeSearchLog__SWIG_4(long jarg1, Solver jarg1_, int jarg2, long jarg3, OptimizeVar jarg3_);
  public final static native long Solver_makeSearchLog__SWIG_5(long jarg1, Solver jarg1_, int jarg2, long jarg3, OptimizeVar jarg3_, VoidToString jarg4);
  public final static native long Solver_makeSearchTrace(long jarg1, Solver jarg1_, String jarg2);
  public final static native long Solver_MakeEnterSearchCallback(long jarg1, Solver jarg1_, VoidToVoid jarg2);
  public final static native long Solver_MakeExitSearchCallback(long jarg1, Solver jarg1_, VoidToVoid jarg2);
  public final static native long Solver_MakeAtSolutionCallback(long jarg1, Solver jarg1_, VoidToVoid jarg2);
  public final static native long Solver_MakePrintModelVisitor(long jarg1, Solver jarg1_);
  public final static native long Solver_MakeStatisticsModelVisitor(long jarg1, Solver jarg1_);
  public final static native long Solver_makeSymmetryManager__SWIG_0(long jarg1, Solver jarg1_, SymmetryBreaker[] jarg2);
  public final static native long Solver_makeSymmetryManager__SWIG_1(long jarg1, Solver jarg1_, long jarg2, SymmetryBreaker jarg2_);
  public final static native long Solver_makeSymmetryManager__SWIG_2(long jarg1, Solver jarg1_, long jarg2, SymmetryBreaker jarg2_, long jarg3, SymmetryBreaker jarg3_);
  public final static native long Solver_makeSymmetryManager__SWIG_3(long jarg1, Solver jarg1_, long jarg2, SymmetryBreaker jarg2_, long jarg3, SymmetryBreaker jarg3_, long jarg4, SymmetryBreaker jarg4_);
  public final static native long Solver_makeSymmetryManager__SWIG_4(long jarg1, Solver jarg1_, long jarg2, SymmetryBreaker jarg2_, long jarg3, SymmetryBreaker jarg3_, long jarg4, SymmetryBreaker jarg4_, long jarg5, SymmetryBreaker jarg5_);
  public final static native long Solver_makeAssignVariableValue(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Solver_MakeVariableLessOrEqualValue(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Solver_MakeVariableGreaterOrEqualValue(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Solver_makeSplitVariableDomain(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, boolean jarg4);
  public final static native long Solver_makeAssignVariableValueOrFail(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Solver_makeAssignVariablesValues(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3);
  public final static native long Solver_makeFailDecision(long jarg1, Solver jarg1_);
  public final static native long Solver_compose__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, DecisionBuilder jarg3_);
  public final static native long Solver_compose__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, DecisionBuilder jarg3_, long jarg4, DecisionBuilder jarg4_);
  public final static native long Solver_compose__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, DecisionBuilder jarg3_, long jarg4, DecisionBuilder jarg4_, long jarg5, DecisionBuilder jarg5_);
  public final static native long Solver_compose__SWIG_3(long jarg1, Solver jarg1_, DecisionBuilder[] jarg2);
  public final static native long Solver_tryDecisions__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, DecisionBuilder jarg3_);
  public final static native long Solver_tryDecisions__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, DecisionBuilder jarg3_, long jarg4, DecisionBuilder jarg4_);
  public final static native long Solver_tryDecisions__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, DecisionBuilder jarg3_, long jarg4, DecisionBuilder jarg4_, long jarg5, DecisionBuilder jarg5_);
  public final static native long Solver_tryDecisions__SWIG_3(long jarg1, Solver jarg1_, DecisionBuilder[] jarg2);
  public final static native long Solver_makePhase__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3, int jarg4);
  public final static native long Solver_makePhase__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, LongToLong jarg3, int jarg4);
  public final static native long Solver_makePhase__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3, LongLongToLong jarg4);
  public final static native long Solver_makePhase__SWIG_3(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3, LongLongLongToBoolean jarg4);
  public final static native long Solver_makePhase__SWIG_4(long jarg1, Solver jarg1_, IntVar[] jarg2, LongToLong jarg3, LongLongToLong jarg4);
  public final static native long Solver_makePhase__SWIG_5(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3, LongLongToLong jarg4, LongToLong jarg5);
  public final static native long Solver_makePhase__SWIG_6(long jarg1, Solver jarg1_, IntVar[] jarg2, LongToLong jarg3, LongLongToLong jarg4, LongToLong jarg5);
  public final static native long Solver_makeDefaultPhase__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2);
  public final static native long Solver_makeDefaultPhase__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, DefaultPhaseParameters jarg3_);
  public final static native long Solver_makePhase__SWIG_7(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, int jarg3, int jarg4);
  public final static native long Solver_makePhase__SWIG_8(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntVar jarg3_, int jarg4, int jarg5);
  public final static native long Solver_makePhase__SWIG_9(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntVar jarg3_, long jarg4, IntVar jarg4_, int jarg5, int jarg6);
  public final static native long Solver_makePhase__SWIG_10(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntVar jarg3_, long jarg4, IntVar jarg4_, long jarg5, IntVar jarg5_, int jarg6, int jarg7);
  public final static native long Solver_makeScheduleOrPostpone(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native long Solver_MakeScheduleOrExpedite(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native long Solver_makeRankFirstInterval(long jarg1, Solver jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native long Solver_makeRankLastInterval(long jarg1, Solver jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native long Solver_makePhase__SWIG_11(long jarg1, Solver jarg1_, IntVar[] jarg2, LongLongToLong jarg3, int jarg4);
  public final static native long Solver_makePhase__SWIG_12(long jarg1, Solver jarg1_, IntVar[] jarg2, LongLongToLong jarg3, LongToLong jarg4, int jarg5);
  public final static native long Solver_makePhase__SWIG_13(long jarg1, Solver jarg1_, IntervalVar[] jarg2, int jarg3);
  public final static native long Solver_makePhase__SWIG_14(long jarg1, Solver jarg1_, SequenceVar[] jarg2, int jarg3);
  public final static native long Solver_makeDecisionBuilderFromAssignment(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_, long jarg3, DecisionBuilder jarg3_, IntVar[] jarg4);
  public final static native long Solver_MakeConstraintAdder(long jarg1, Solver jarg1_, long jarg2, Constraint jarg2_);
  public final static native long Solver_makeSolveOnce__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native long Solver_makeSolveOnce__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_);
  public final static native long Solver_makeSolveOnce__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_);
  public final static native long Solver_makeSolveOnce__SWIG_3(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_);
  public final static native long Solver_makeSolveOnce__SWIG_4(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, SearchMonitor jarg3_, long jarg4, SearchMonitor jarg4_, long jarg5, SearchMonitor jarg5_, long jarg6, SearchMonitor jarg6_);
  public final static native long Solver_makeSolveOnce__SWIG_5(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, SearchMonitor[] jarg3);
  public final static native long Solver_MakeNestedOptimize__SWIG_0(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Assignment jarg3_, boolean jarg4, long jarg5);
  public final static native long Solver_MakeNestedOptimize__SWIG_1(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Assignment jarg3_, boolean jarg4, long jarg5, long jarg6, SearchMonitor jarg6_);
  public final static native long Solver_MakeNestedOptimize__SWIG_2(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Assignment jarg3_, boolean jarg4, long jarg5, long jarg6, SearchMonitor jarg6_, long jarg7, SearchMonitor jarg7_);
  public final static native long Solver_MakeNestedOptimize__SWIG_3(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Assignment jarg3_, boolean jarg4, long jarg5, long jarg6, SearchMonitor jarg6_, long jarg7, SearchMonitor jarg7_, long jarg8, SearchMonitor jarg8_);
  public final static native long Solver_MakeNestedOptimize__SWIG_4(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Assignment jarg3_, boolean jarg4, long jarg5, long jarg6, SearchMonitor jarg6_, long jarg7, SearchMonitor jarg7_, long jarg8, SearchMonitor jarg8_, long jarg9, SearchMonitor jarg9_);
  public final static native long Solver_MakeNestedOptimize__SWIG_5(long jarg1, Solver jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Assignment jarg3_, boolean jarg4, long jarg5, SearchMonitor[] jarg6);
  public final static native long Solver_makeRestoreAssignment(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_makeStoreAssignment(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_makeOperator__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3);
  public final static native long Solver_makeOperator__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, int jarg4);
  public final static native long Solver_makeOperator__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, LongLongLongToLong jarg3, int jarg4);
  public final static native long Solver_makeOperator__SWIG_3(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, LongLongLongToLong jarg4, int jarg5);
  public final static native long Solver_makeRandomLnsOperator__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3);
  public final static native long Solver_makeRandomLnsOperator__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3, int jarg4);
  public final static native long Solver_MakeMoveTowardTargetOperator__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Solver_MakeMoveTowardTargetOperator__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, long[] jarg3);
  public final static native long Solver_concatenateOperators__SWIG_0(long jarg1, Solver jarg1_, LocalSearchOperator[] jarg2);
  public final static native long Solver_concatenateOperators__SWIG_1(long jarg1, Solver jarg1_, LocalSearchOperator[] jarg2, boolean jarg3);
  public final static native long Solver_concatenateOperators__SWIG_2(long jarg1, Solver jarg1_, LocalSearchOperator[] jarg2, IntIntToLong jarg3);
  public final static native long Solver_randomConcatenateOperators__SWIG_0(long jarg1, Solver jarg1_, LocalSearchOperator[] jarg2);
  public final static native long Solver_randomConcatenateOperators__SWIG_1(long jarg1, Solver jarg1_, LocalSearchOperator[] jarg2, int jarg3);
  public final static native long Solver_makeNeighborhoodLimit(long jarg1, Solver jarg1_, long jarg2, LocalSearchOperator jarg2_, long jarg3);
  public final static native long Solver_makeLocalSearchPhase__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_, long jarg3, LocalSearchPhaseParameters jarg3_);
  public final static native long Solver_makeLocalSearchPhase__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, long jarg3, DecisionBuilder jarg3_, long jarg4, LocalSearchPhaseParameters jarg4_);
  public final static native long Solver_makeLocalSearchPhase__SWIG_2(long jarg1, Solver jarg1_, SequenceVar[] jarg2, long jarg3, DecisionBuilder jarg3_, long jarg4, LocalSearchPhaseParameters jarg4_);
  public final static native long Solver_MakeDefaultSolutionPool(long jarg1, Solver jarg1_);
  public final static native long Solver_makeLocalSearchPhaseParameters__SWIG_0(long jarg1, Solver jarg1_, long jarg2, LocalSearchOperator jarg2_, long jarg3, DecisionBuilder jarg3_);
  public final static native long Solver_makeLocalSearchPhaseParameters__SWIG_1(long jarg1, Solver jarg1_, long jarg2, LocalSearchOperator jarg2_, long jarg3, DecisionBuilder jarg3_, long jarg4, SearchLimit jarg4_);
  public final static native long Solver_makeLocalSearchPhaseParameters__SWIG_2(long jarg1, Solver jarg1_, long jarg2, LocalSearchOperator jarg2_, long jarg3, DecisionBuilder jarg3_, long jarg4, SearchLimit jarg4_, LocalSearchFilter[] jarg5);
  public final static native long Solver_makeLocalSearchPhaseParameters__SWIG_3(long jarg1, Solver jarg1_, long jarg2, SolutionPool jarg2_, long jarg3, LocalSearchOperator jarg3_, long jarg4, DecisionBuilder jarg4_);
  public final static native long Solver_makeLocalSearchPhaseParameters__SWIG_4(long jarg1, Solver jarg1_, long jarg2, SolutionPool jarg2_, long jarg3, LocalSearchOperator jarg3_, long jarg4, DecisionBuilder jarg4_, long jarg5, SearchLimit jarg5_);
  public final static native long Solver_makeLocalSearchPhaseParameters__SWIG_5(long jarg1, Solver jarg1_, long jarg2, SolutionPool jarg2_, long jarg3, LocalSearchOperator jarg3_, long jarg4, DecisionBuilder jarg4_, long jarg5, SearchLimit jarg5_, LocalSearchFilter[] jarg6);
  public final static native long Solver_MakeVariableDomainFilter(long jarg1, Solver jarg1_);
  public final static native long Solver_makeLocalSearchObjectiveFilter__SWIG_0(long jarg1, Solver jarg1_, IntVar[] jarg2, LongLongToLong jarg3, long jarg4, IntVar jarg4_, int jarg5, int jarg6);
  public final static native long Solver_makeLocalSearchObjectiveFilter__SWIG_1(long jarg1, Solver jarg1_, IntVar[] jarg2, LongLongToLong jarg3, LongToVoid jarg4, long jarg5, IntVar jarg5_, int jarg6, int jarg7);
  public final static native long Solver_makeLocalSearchObjectiveFilter__SWIG_2(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, LongLongLongToLong jarg4, long jarg5, IntVar jarg5_, int jarg6, int jarg7);
  public final static native long Solver_makeLocalSearchObjectiveFilter__SWIG_3(long jarg1, Solver jarg1_, IntVar[] jarg2, IntVar[] jarg3, LongLongLongToLong jarg4, LongToVoid jarg5, long jarg6, IntVar jarg6_, int jarg7, int jarg8);
  public final static native void Solver_TopPeriodicCheck(long jarg1, Solver jarg1_);
  public final static native int Solver_TopProgressPercent(long jarg1, Solver jarg1_);
  public final static native void Solver_PushState(long jarg1, Solver jarg1_);
  public final static native void Solver_PopState(long jarg1, Solver jarg1_);
  public final static native int Solver_searchDepth(long jarg1, Solver jarg1_);
  public final static native int Solver_searchLeftDepth(long jarg1, Solver jarg1_);
  public final static native int Solver_solveDepth(long jarg1, Solver jarg1_);
  public final static native void Solver_SetBranchSelector(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_MakeApplyBranchSelector(long jarg1, Solver jarg1_, long jarg2);
  public final static native long Solver_rand64(long jarg1, Solver jarg1_, long jarg2);
  public final static native int Solver_rand32(long jarg1, Solver jarg1_, int jarg2);
  public final static native void Solver_reSeed(long jarg1, Solver jarg1_, int jarg2);
  public final static native void Solver_exportProfilingOverview(long jarg1, Solver jarg1_, String jarg2);
  public final static native String Solver_LocalSearchProfile(long jarg1, Solver jarg1_);
  public final static native boolean Solver_CurrentlyInSolve(long jarg1, Solver jarg1_);
  public final static native int Solver_constraints(long jarg1, Solver jarg1_);
  public final static native void Solver_accept__SWIG_0(long jarg1, Solver jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native void Solver_accept__SWIG_1(long jarg1, Solver jarg1_, long jarg2, ModelVisitor jarg2_, SearchMonitor[] jarg3);
  public final static native void Solver_accept__SWIG_2(long jarg1, Solver jarg1_, long jarg2, ModelVisitor jarg2_, SearchMonitor[] jarg3, long jarg4, DecisionBuilder jarg4_);
  public final static native long Solver_balancing_decision(long jarg1, Solver jarg1_);
  public final static native void Solver_clear_fail_intercept(long jarg1, Solver jarg1_);
  public final static native long Solver_demon_profiler(long jarg1, Solver jarg1_);
  public final static native boolean Solver_HasName(long jarg1, Solver jarg1_, long jarg2, PropagationBaseObject jarg2_);
  public final static native long Solver_RegisterDemon(long jarg1, Solver jarg1_, long jarg2, Demon jarg2_);
  public final static native long Solver_RegisterIntExpr(long jarg1, Solver jarg1_, long jarg2, IntExpr jarg2_);
  public final static native long Solver_RegisterIntVar(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_);
  public final static native long Solver_RegisterIntervalVar(long jarg1, Solver jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Solver_ActiveSearch(long jarg1, Solver jarg1_);
  public final static native long Solver_Cache(long jarg1, Solver jarg1_);
  public final static native boolean Solver_InstrumentsDemons(long jarg1, Solver jarg1_);
  public final static native boolean Solver_IsProfilingEnabled(long jarg1, Solver jarg1_);
  public final static native boolean Solver_IsLocalSearchProfilingEnabled(long jarg1, Solver jarg1_);
  public final static native boolean Solver_InstrumentsVariables(long jarg1, Solver jarg1_);
  public final static native boolean Solver_NameAllVariables(long jarg1, Solver jarg1_);
  public final static native String Solver_model_name(long jarg1, Solver jarg1_);
  public final static native long Solver_GetPropagationMonitor(long jarg1, Solver jarg1_);
  public final static native void Solver_AddPropagationMonitor(long jarg1, Solver jarg1_, long jarg2, PropagationMonitor jarg2_);
  public final static native long Solver_GetLocalSearchMonitor(long jarg1, Solver jarg1_);
  public final static native void Solver_AddLocalSearchMonitor(long jarg1, Solver jarg1_, long jarg2, LocalSearchMonitor jarg2_);
  public final static native void Solver_tmp_vector__set(long jarg1, Solver jarg1_, long[] jarg2);
  public final static native long[] Solver_tmp_vector__get(long jarg1, Solver jarg1_);
  public final static native long Solver_CastExpression(long jarg1, Solver jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Solver_FinishCurrentSearch(long jarg1, Solver jarg1_);
  public final static native void Solver_RestartCurrentSearch(long jarg1, Solver jarg1_);
  public final static native void Solver_ShouldFail(long jarg1, Solver jarg1_);
  public final static native void Solver_CheckFail(long jarg1, Solver jarg1_);
  public final static native long Zero();
  public final static native long new_BaseObject();
  public final static native void delete_BaseObject(long jarg1);
  public final static native String BaseObject_toString(long jarg1, BaseObject jarg1_);
  public final static native long new_PropagationBaseObject(long jarg1, Solver jarg1_);
  public final static native void delete_PropagationBaseObject(long jarg1);
  public final static native String PropagationBaseObject_toString(long jarg1, PropagationBaseObject jarg1_);
  public final static native long PropagationBaseObject_solver(long jarg1, PropagationBaseObject jarg1_);
  public final static native void PropagationBaseObject_FreezeQueue(long jarg1, PropagationBaseObject jarg1_);
  public final static native void PropagationBaseObject_UnfreezeQueue(long jarg1, PropagationBaseObject jarg1_);
  public final static native void PropagationBaseObject_EnqueueDelayedDemon(long jarg1, PropagationBaseObject jarg1_, long jarg2, Demon jarg2_);
  public final static native void PropagationBaseObject_EnqueueVar(long jarg1, PropagationBaseObject jarg1_, long jarg2, Demon jarg2_);
  public final static native void PropagationBaseObject_ExecuteAll(long jarg1, PropagationBaseObject jarg1_, long jarg2);
  public final static native void PropagationBaseObject_EnqueueAll(long jarg1, PropagationBaseObject jarg1_, long jarg2);
  public final static native void PropagationBaseObject_reset_action_on_fail(long jarg1, PropagationBaseObject jarg1_);
  public final static native void PropagationBaseObject_set_variable_to_clean_on_fail(long jarg1, PropagationBaseObject jarg1_, long jarg2, IntVar jarg2_);
  public final static native String PropagationBaseObject_name(long jarg1, PropagationBaseObject jarg1_);
  public final static native void PropagationBaseObject_setName(long jarg1, PropagationBaseObject jarg1_, String jarg2);
  public final static native boolean PropagationBaseObject_HasName(long jarg1, PropagationBaseObject jarg1_);
  public final static native String PropagationBaseObject_BaseName(long jarg1, PropagationBaseObject jarg1_);
  public final static native long new_Decision();
  public final static native void delete_Decision(long jarg1);
  public final static native void Decision_Apply(long jarg1, Decision jarg1_, long jarg2, Solver jarg2_);
  public final static native void Decision_Refute(long jarg1, Decision jarg1_, long jarg2, Solver jarg2_);
  public final static native String Decision_toString(long jarg1, Decision jarg1_);
  public final static native String Decision_toStringSwigExplicitDecision(long jarg1, Decision jarg1_);
  public final static native void Decision_accept(long jarg1, Decision jarg1_, long jarg2, DecisionVisitor jarg2_);
  public final static native void Decision_acceptSwigExplicitDecision(long jarg1, Decision jarg1_, long jarg2, DecisionVisitor jarg2_);
  public final static native void Decision_director_connect(Decision obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Decision_change_ownership(Decision obj, long cptr, boolean take_or_release);
  public final static native long new_DecisionVisitor();
  public final static native void delete_DecisionVisitor(long jarg1);
  public final static native void DecisionVisitor_VisitSetVariableValue(long jarg1, DecisionVisitor jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void DecisionVisitor_VisitSplitVariableDomain(long jarg1, DecisionVisitor jarg1_, long jarg2, IntVar jarg2_, long jarg3, boolean jarg4);
  public final static native void DecisionVisitor_VisitScheduleOrPostpone(long jarg1, DecisionVisitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void DecisionVisitor_VisitScheduleOrExpedite(long jarg1, DecisionVisitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void DecisionVisitor_VisitRankFirstInterval(long jarg1, DecisionVisitor jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native void DecisionVisitor_VisitRankLastInterval(long jarg1, DecisionVisitor jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native void DecisionVisitor_VisitUnknownDecision(long jarg1, DecisionVisitor jarg1_);
  public final static native long new_DecisionBuilder();
  public final static native void delete_DecisionBuilder(long jarg1);
  public final static native long DecisionBuilder_nextWrap(long jarg1, DecisionBuilder jarg1_, long jarg2, Solver jarg2_);
  public final static native String DecisionBuilder_toString(long jarg1, DecisionBuilder jarg1_);
  public final static native String DecisionBuilder_toStringSwigExplicitDecisionBuilder(long jarg1, DecisionBuilder jarg1_);
  public final static native void DecisionBuilder_director_connect(DecisionBuilder obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void DecisionBuilder_change_ownership(DecisionBuilder obj, long cptr, boolean take_or_release);
  public final static native void delete_Demon(long jarg1);
  public final static native void Demon_Run(long jarg1, Demon jarg1_, long jarg2, Solver jarg2_);
  public final static native int Demon_priority(long jarg1, Demon jarg1_);
  public final static native String Demon_toString(long jarg1, Demon jarg1_);
  public final static native void Demon_inhibit(long jarg1, Demon jarg1_, long jarg2, Solver jarg2_);
  public final static native void Demon_desinhibit(long jarg1, Demon jarg1_, long jarg2, Solver jarg2_);
  public final static native String ModelVisitor_kAbs_get();
  public final static native String ModelVisitor_kAbsEqual_get();
  public final static native String ModelVisitor_kAllDifferent_get();
  public final static native String ModelVisitor_kAllowedAssignments_get();
  public final static native String ModelVisitor_kAtMost_get();
  public final static native String ModelVisitor_kIndexOf_get();
  public final static native String ModelVisitor_kBetween_get();
  public final static native String ModelVisitor_kConditionalExpr_get();
  public final static native String ModelVisitor_kCircuit_get();
  public final static native String ModelVisitor_kConvexPiecewise_get();
  public final static native String ModelVisitor_kCountEqual_get();
  public final static native String ModelVisitor_kCover_get();
  public final static native String ModelVisitor_kCumulative_get();
  public final static native String ModelVisitor_kDeviation_get();
  public final static native String ModelVisitor_kDifference_get();
  public final static native String ModelVisitor_kDisjunctive_get();
  public final static native String ModelVisitor_kDistribute_get();
  public final static native String ModelVisitor_kDivide_get();
  public final static native String ModelVisitor_kDurationExpr_get();
  public final static native String ModelVisitor_kElement_get();
  public final static native String ModelVisitor_kElementEqual_get();
  public final static native String ModelVisitor_kEndExpr_get();
  public final static native String ModelVisitor_kEquality_get();
  public final static native String ModelVisitor_kFalseConstraint_get();
  public final static native String ModelVisitor_kGlobalCardinality_get();
  public final static native String ModelVisitor_kGreater_get();
  public final static native String ModelVisitor_kGreaterOrEqual_get();
  public final static native String ModelVisitor_kIntegerVariable_get();
  public final static native String ModelVisitor_kIntervalBinaryRelation_get();
  public final static native String ModelVisitor_kIntervalDisjunction_get();
  public final static native String ModelVisitor_kIntervalUnaryRelation_get();
  public final static native String ModelVisitor_kIntervalVariable_get();
  public final static native String ModelVisitor_kInversePermutation_get();
  public final static native String ModelVisitor_kIsBetween_get();
  public final static native String ModelVisitor_kIsDifferent_get();
  public final static native String ModelVisitor_kIsEqual_get();
  public final static native String ModelVisitor_kIsGreater_get();
  public final static native String ModelVisitor_kIsGreaterOrEqual_get();
  public final static native String ModelVisitor_kIsLess_get();
  public final static native String ModelVisitor_kIsLessOrEqual_get();
  public final static native String ModelVisitor_kIsMember_get();
  public final static native String ModelVisitor_kLess_get();
  public final static native String ModelVisitor_kLessOrEqual_get();
  public final static native String ModelVisitor_kLexLess_get();
  public final static native String ModelVisitor_kLinkExprVar_get();
  public final static native String ModelVisitor_kMapDomain_get();
  public final static native String ModelVisitor_kMax_get();
  public final static native String ModelVisitor_kMaxEqual_get();
  public final static native String ModelVisitor_kMember_get();
  public final static native String ModelVisitor_kMin_get();
  public final static native String ModelVisitor_kMinEqual_get();
  public final static native String ModelVisitor_kModulo_get();
  public final static native String ModelVisitor_kNoCycle_get();
  public final static native String ModelVisitor_kNonEqual_get();
  public final static native String ModelVisitor_kNotBetween_get();
  public final static native String ModelVisitor_kNotMember_get();
  public final static native String ModelVisitor_kNullIntersect_get();
  public final static native String ModelVisitor_kOpposite_get();
  public final static native String ModelVisitor_kPack_get();
  public final static native String ModelVisitor_kPathCumul_get();
  public final static native String ModelVisitor_kDelayedPathCumul_get();
  public final static native String ModelVisitor_kPerformedExpr_get();
  public final static native String ModelVisitor_kPower_get();
  public final static native String ModelVisitor_kProduct_get();
  public final static native String ModelVisitor_kScalProd_get();
  public final static native String ModelVisitor_kScalProdEqual_get();
  public final static native String ModelVisitor_kScalProdGreaterOrEqual_get();
  public final static native String ModelVisitor_kScalProdLessOrEqual_get();
  public final static native String ModelVisitor_kSemiContinuous_get();
  public final static native String ModelVisitor_kSequenceVariable_get();
  public final static native String ModelVisitor_kSortingConstraint_get();
  public final static native String ModelVisitor_kSquare_get();
  public final static native String ModelVisitor_kStartExpr_get();
  public final static native String ModelVisitor_kSum_get();
  public final static native String ModelVisitor_kSumEqual_get();
  public final static native String ModelVisitor_kSumGreaterOrEqual_get();
  public final static native String ModelVisitor_kSumLessOrEqual_get();
  public final static native String ModelVisitor_kTrace_get();
  public final static native String ModelVisitor_kTransition_get();
  public final static native String ModelVisitor_kTrueConstraint_get();
  public final static native String ModelVisitor_kVarBoundWatcher_get();
  public final static native String ModelVisitor_kVarValueWatcher_get();
  public final static native String ModelVisitor_kCountAssignedItemsExtension_get();
  public final static native String ModelVisitor_kCountUsedBinsExtension_get();
  public final static native String ModelVisitor_kInt64ToBoolExtension_get();
  public final static native String ModelVisitor_kInt64ToInt64Extension_get();
  public final static native String ModelVisitor_kObjectiveExtension_get();
  public final static native String ModelVisitor_kSearchLimitExtension_get();
  public final static native String ModelVisitor_kUsageEqualVariableExtension_get();
  public final static native String ModelVisitor_kUsageLessConstantExtension_get();
  public final static native String ModelVisitor_kVariableGroupExtension_get();
  public final static native String ModelVisitor_kVariableUsageLessConstantExtension_get();
  public final static native String ModelVisitor_kWeightedSumOfAssignedEqualVariableExtension_get();
  public final static native String ModelVisitor_kActiveArgument_get();
  public final static native String ModelVisitor_kAssumePathsArgument_get();
  public final static native String ModelVisitor_kBranchesLimitArgument_get();
  public final static native String ModelVisitor_kCapacityArgument_get();
  public final static native String ModelVisitor_kCardsArgument_get();
  public final static native String ModelVisitor_kCoefficientsArgument_get();
  public final static native String ModelVisitor_kCountArgument_get();
  public final static native String ModelVisitor_kCumulativeArgument_get();
  public final static native String ModelVisitor_kCumulsArgument_get();
  public final static native String ModelVisitor_kDemandsArgument_get();
  public final static native String ModelVisitor_kDurationMaxArgument_get();
  public final static native String ModelVisitor_kDurationMinArgument_get();
  public final static native String ModelVisitor_kEarlyCostArgument_get();
  public final static native String ModelVisitor_kEarlyDateArgument_get();
  public final static native String ModelVisitor_kEndMaxArgument_get();
  public final static native String ModelVisitor_kEndMinArgument_get();
  public final static native String ModelVisitor_kEndsArgument_get();
  public final static native String ModelVisitor_kExpressionArgument_get();
  public final static native String ModelVisitor_kFailuresLimitArgument_get();
  public final static native String ModelVisitor_kFinalStatesArgument_get();
  public final static native String ModelVisitor_kFixedChargeArgument_get();
  public final static native String ModelVisitor_kIndex2Argument_get();
  public final static native String ModelVisitor_kIndexArgument_get();
  public final static native String ModelVisitor_kInitialState_get();
  public final static native String ModelVisitor_kIntervalArgument_get();
  public final static native String ModelVisitor_kIntervalsArgument_get();
  public final static native String ModelVisitor_kLateCostArgument_get();
  public final static native String ModelVisitor_kLateDateArgument_get();
  public final static native String ModelVisitor_kLeftArgument_get();
  public final static native String ModelVisitor_kMaxArgument_get();
  public final static native String ModelVisitor_kMaximizeArgument_get();
  public final static native String ModelVisitor_kMinArgument_get();
  public final static native String ModelVisitor_kModuloArgument_get();
  public final static native String ModelVisitor_kNextsArgument_get();
  public final static native String ModelVisitor_kOptionalArgument_get();
  public final static native String ModelVisitor_kPartialArgument_get();
  public final static native String ModelVisitor_kPositionXArgument_get();
  public final static native String ModelVisitor_kPositionYArgument_get();
  public final static native String ModelVisitor_kRangeArgument_get();
  public final static native String ModelVisitor_kRelationArgument_get();
  public final static native String ModelVisitor_kRightArgument_get();
  public final static native String ModelVisitor_kSequenceArgument_get();
  public final static native String ModelVisitor_kSequencesArgument_get();
  public final static native String ModelVisitor_kSizeArgument_get();
  public final static native String ModelVisitor_kSizeXArgument_get();
  public final static native String ModelVisitor_kSizeYArgument_get();
  public final static native String ModelVisitor_kSmartTimeCheckArgument_get();
  public final static native String ModelVisitor_kSolutionLimitArgument_get();
  public final static native String ModelVisitor_kStartMaxArgument_get();
  public final static native String ModelVisitor_kStartMinArgument_get();
  public final static native String ModelVisitor_kStartsArgument_get();
  public final static native String ModelVisitor_kStepArgument_get();
  public final static native String ModelVisitor_kTargetArgument_get();
  public final static native String ModelVisitor_kTimeLimitArgument_get();
  public final static native String ModelVisitor_kTransitsArgument_get();
  public final static native String ModelVisitor_kTuplesArgument_get();
  public final static native String ModelVisitor_kValueArgument_get();
  public final static native String ModelVisitor_kValuesArgument_get();
  public final static native String ModelVisitor_kVariableArgument_get();
  public final static native String ModelVisitor_kVarsArgument_get();
  public final static native String ModelVisitor_kEvaluatorArgument_get();
  public final static native String ModelVisitor_kMirrorOperation_get();
  public final static native String ModelVisitor_kRelaxedMaxOperation_get();
  public final static native String ModelVisitor_kRelaxedMinOperation_get();
  public final static native String ModelVisitor_kSumOperation_get();
  public final static native String ModelVisitor_kDifferenceOperation_get();
  public final static native String ModelVisitor_kProductOperation_get();
  public final static native String ModelVisitor_kStartSyncOnStartOperation_get();
  public final static native String ModelVisitor_kStartSyncOnEndOperation_get();
  public final static native String ModelVisitor_kTraceOperation_get();
  public final static native void delete_ModelVisitor(long jarg1);
  public final static native void ModelVisitor_BeginVisitModel(long jarg1, ModelVisitor jarg1_, String jarg2);
  public final static native void ModelVisitor_EndVisitModel(long jarg1, ModelVisitor jarg1_, String jarg2);
  public final static native void ModelVisitor_BeginVisitConstraint(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, Constraint jarg3_);
  public final static native void ModelVisitor_EndVisitConstraint(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, Constraint jarg3_);
  public final static native void ModelVisitor_BeginVisitExtension(long jarg1, ModelVisitor jarg1_, String jarg2);
  public final static native void ModelVisitor_EndVisitExtension(long jarg1, ModelVisitor jarg1_, String jarg2);
  public final static native void ModelVisitor_BeginVisitIntegerExpression(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, IntExpr jarg3_);
  public final static native void ModelVisitor_EndVisitIntegerExpression(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, IntExpr jarg3_);
  public final static native void ModelVisitor_VisitIntegerVariable__SWIG_0(long jarg1, ModelVisitor jarg1_, long jarg2, IntVar jarg2_, long jarg3, IntExpr jarg3_);
  public final static native void ModelVisitor_VisitIntegerVariable__SWIG_1(long jarg1, ModelVisitor jarg1_, long jarg2, IntVar jarg2_, String jarg3, long jarg4, long jarg5, IntVar jarg5_);
  public final static native void ModelVisitor_VisitIntervalVariable(long jarg1, ModelVisitor jarg1_, long jarg2, IntervalVar jarg2_, String jarg3, long jarg4, long jarg5, IntervalVar jarg5_);
  public final static native void ModelVisitor_VisitSequenceVariable(long jarg1, ModelVisitor jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void ModelVisitor_VisitIntegerArgument(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3);
  public final static native void ModelVisitor_VisitIntegerArrayArgument(long jarg1, ModelVisitor jarg1_, String jarg2, long[] jarg3);
  public final static native void ModelVisitor_VisitIntegerMatrixArgument(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, IntTupleSet jarg3_);
  public final static native void ModelVisitor_VisitIntegerExpressionArgument(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, IntExpr jarg3_);
  public final static native void ModelVisitor_VisitIntegerVariableArrayArgument(long jarg1, ModelVisitor jarg1_, String jarg2, IntVar[] jarg3);
  public final static native void ModelVisitor_VisitIntervalArgument(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, IntervalVar jarg3_);
  public final static native void ModelVisitor_VisitIntervalArrayArgument(long jarg1, ModelVisitor jarg1_, String jarg2, IntervalVar[] jarg3);
  public final static native void ModelVisitor_VisitSequenceArgument(long jarg1, ModelVisitor jarg1_, String jarg2, long jarg3, SequenceVar jarg3_);
  public final static native void ModelVisitor_VisitSequenceArrayArgument(long jarg1, ModelVisitor jarg1_, String jarg2, SequenceVar[] jarg3);
  public final static native long new_ModelVisitor();
  public final static native void delete_Constraint(long jarg1);
  public final static native void Constraint_Post(long jarg1, Constraint jarg1_);
  public final static native void Constraint_InitialPropagate(long jarg1, Constraint jarg1_);
  public final static native String Constraint_toString(long jarg1, Constraint jarg1_);
  public final static native void Constraint_PostAndPropagate(long jarg1, Constraint jarg1_);
  public final static native void Constraint_accept(long jarg1, Constraint jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native boolean Constraint_IsCastConstraint(long jarg1, Constraint jarg1_);
  public final static native long Constraint_var(long jarg1, Constraint jarg1_);
  public final static native void delete_CastConstraint(long jarg1);
  public final static native long CastConstraint_target_var(long jarg1, CastConstraint jarg1_);
  public final static native int SearchMonitor_kNoProgress_get();
  public final static native long new_SearchMonitor(long jarg1, Solver jarg1_);
  public final static native void delete_SearchMonitor(long jarg1);
  public final static native void SearchMonitor_enterSearch(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_enterSearchSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_restartSearch(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_restartSearchSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_ExitSearch(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_ExitSearchSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_beginNextDecision(long jarg1, SearchMonitor jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native void SearchMonitor_beginNextDecisionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native void SearchMonitor_endNextDecision(long jarg1, SearchMonitor jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Decision jarg3_);
  public final static native void SearchMonitor_endNextDecisionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, DecisionBuilder jarg2_, long jarg3, Decision jarg3_);
  public final static native void SearchMonitor_applyDecision(long jarg1, SearchMonitor jarg1_, long jarg2, Decision jarg2_);
  public final static native void SearchMonitor_applyDecisionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, Decision jarg2_);
  public final static native void SearchMonitor_refuteDecision(long jarg1, SearchMonitor jarg1_, long jarg2, Decision jarg2_);
  public final static native void SearchMonitor_refuteDecisionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, Decision jarg2_);
  public final static native void SearchMonitor_afterDecision(long jarg1, SearchMonitor jarg1_, long jarg2, Decision jarg2_, boolean jarg3);
  public final static native void SearchMonitor_afterDecisionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, Decision jarg2_, boolean jarg3);
  public final static native void SearchMonitor_beginFail(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_beginFailSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_endFail(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_endFailSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_beginInitialPropagation(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_beginInitialPropagationSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_endInitialPropagation(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_endInitialPropagationSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_acceptSolution(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_acceptSolutionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_atSolution(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_atSolutionSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_noMoreSolutions(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_noMoreSolutionsSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_localOptimum(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_localOptimumSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native boolean SearchMonitor_acceptDelta(long jarg1, SearchMonitor jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native boolean SearchMonitor_acceptDeltaSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void SearchMonitor_acceptNeighbor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_acceptNeighborSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native long SearchMonitor_solver(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_periodicCheck(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_periodicCheckSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native int SearchMonitor_ProgressPercent(long jarg1, SearchMonitor jarg1_);
  public final static native int SearchMonitor_ProgressPercentSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_accept(long jarg1, SearchMonitor jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native void SearchMonitor_acceptSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native void SearchMonitor_Install(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_InstallSwigExplicitSearchMonitor(long jarg1, SearchMonitor jarg1_);
  public final static native void SearchMonitor_director_connect(SearchMonitor obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SearchMonitor_change_ownership(SearchMonitor obj, long cptr, boolean take_or_release);
  public final static native void delete_IntExpr(long jarg1);
  public final static native long IntExpr_min(long jarg1, IntExpr jarg1_);
  public final static native void IntExpr_setMin(long jarg1, IntExpr jarg1_, long jarg2);
  public final static native long IntExpr_max(long jarg1, IntExpr jarg1_);
  public final static native void IntExpr_setMax(long jarg1, IntExpr jarg1_, long jarg2);
  public final static native void IntExpr_range(long jarg1, IntExpr jarg1_, long jarg2, long jarg3);
  public final static native void IntExpr_setRange(long jarg1, IntExpr jarg1_, long jarg2, long jarg3);
  public final static native void IntExpr_setValue(long jarg1, IntExpr jarg1_, long jarg2);
  public final static native boolean IntExpr_bound(long jarg1, IntExpr jarg1_);
  public final static native boolean IntExpr_isVar(long jarg1, IntExpr jarg1_);
  public final static native long IntExpr_var(long jarg1, IntExpr jarg1_);
  public final static native long IntExpr_VarWithName(long jarg1, IntExpr jarg1_, String jarg2);
  public final static native void IntExpr_WhenRange__SWIG_0(long jarg1, IntExpr jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntExpr_WhenRange__SWIG_1(long jarg1, IntExpr jarg1_, VoidToVoid jarg2);
  public final static native void IntExpr_accept(long jarg1, IntExpr jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native void delete_IntVarIterator(long jarg1);
  public final static native void IntVarIterator_Init(long jarg1, IntVarIterator jarg1_);
  public final static native boolean IntVarIterator_Ok(long jarg1, IntVarIterator jarg1_);
  public final static native long IntVarIterator_value(long jarg1, IntVarIterator jarg1_);
  public final static native void IntVarIterator_Next(long jarg1, IntVarIterator jarg1_);
  public final static native String IntVarIterator_toString(long jarg1, IntVarIterator jarg1_);
  public final static native void delete_IntVar(long jarg1);
  public final static native boolean IntVar_isVar(long jarg1, IntVar jarg1_);
  public final static native long IntVar_var(long jarg1, IntVar jarg1_);
  public final static native long IntVar_value(long jarg1, IntVar jarg1_);
  public final static native void IntVar_removeValue(long jarg1, IntVar jarg1_, long jarg2);
  public final static native void IntVar_removeInterval(long jarg1, IntVar jarg1_, long jarg2, long jarg3);
  public final static native void IntVar_removeValues(long jarg1, IntVar jarg1_, long[] jarg2);
  public final static native void IntVar_setValue(long jarg1, IntVar jarg1_, long[] jarg2);
  public final static native void IntVar_WhenBound__SWIG_0(long jarg1, IntVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntVar_WhenBound__SWIG_1(long jarg1, IntVar jarg1_, VoidToVoid jarg2);
  public final static native void IntVar_WhenDomain__SWIG_0(long jarg1, IntVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntVar_WhenDomain__SWIG_1(long jarg1, IntVar jarg1_, VoidToVoid jarg2);
  public final static native java.math.BigInteger IntVar_Size(long jarg1, IntVar jarg1_);
  public final static native boolean IntVar_contains(long jarg1, IntVar jarg1_, long jarg2);
  public final static native long IntVar_MakeHoleIterator(long jarg1, IntVar jarg1_, boolean jarg2);
  public final static native long IntVar_MakeDomainIterator(long jarg1, IntVar jarg1_, boolean jarg2);
  public final static native long IntVar_OldMin(long jarg1, IntVar jarg1_);
  public final static native long IntVar_OldMax(long jarg1, IntVar jarg1_);
  public final static native int IntVar_VarType(long jarg1, IntVar jarg1_);
  public final static native void IntVar_accept(long jarg1, IntVar jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native long IntVar_IsEqual(long jarg1, IntVar jarg1_, long jarg2);
  public final static native long IntVar_IsDifferent(long jarg1, IntVar jarg1_, long jarg2);
  public final static native long IntVar_IsGreaterOrEqual(long jarg1, IntVar jarg1_, long jarg2);
  public final static native long IntVar_IsLessOrEqual(long jarg1, IntVar jarg1_, long jarg2);
  public final static native int IntVar_index(long jarg1, IntVar jarg1_);
  public final static native long new_SolutionCollector__SWIG_0(long jarg1, Solver jarg1_, long jarg2, Assignment jarg2_);
  public final static native long new_SolutionCollector__SWIG_1(long jarg1, Solver jarg1_);
  public final static native void delete_SolutionCollector(long jarg1);
  public final static native void SolutionCollector_add__SWIG_0(long jarg1, SolutionCollector jarg1_, long jarg2, IntVar jarg2_);
  public final static native void SolutionCollector_add__SWIG_1(long jarg1, SolutionCollector jarg1_, IntVar[] jarg2);
  public final static native void SolutionCollector_add__SWIG_2(long jarg1, SolutionCollector jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native void SolutionCollector_add__SWIG_3(long jarg1, SolutionCollector jarg1_, IntervalVar[] jarg2);
  public final static native void SolutionCollector_add__SWIG_4(long jarg1, SolutionCollector jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void SolutionCollector_add__SWIG_5(long jarg1, SolutionCollector jarg1_, SequenceVar[] jarg2);
  public final static native void SolutionCollector_addObjective(long jarg1, SolutionCollector jarg1_, long jarg2, IntVar jarg2_);
  public final static native void SolutionCollector_enterSearch(long jarg1, SolutionCollector jarg1_);
  public final static native int SolutionCollector_solutionCount(long jarg1, SolutionCollector jarg1_);
  public final static native long SolutionCollector_solution(long jarg1, SolutionCollector jarg1_, int jarg2);
  public final static native long SolutionCollector_wallTime(long jarg1, SolutionCollector jarg1_, int jarg2);
  public final static native long SolutionCollector_branches(long jarg1, SolutionCollector jarg1_, int jarg2);
  public final static native long SolutionCollector_failures(long jarg1, SolutionCollector jarg1_, int jarg2);
  public final static native long SolutionCollector_objectiveValue(long jarg1, SolutionCollector jarg1_, int jarg2);
  public final static native long SolutionCollector_value(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, IntVar jarg3_);
  public final static native long SolutionCollector_startValue(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, IntervalVar jarg3_);
  public final static native long SolutionCollector_endValue(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, IntervalVar jarg3_);
  public final static native long SolutionCollector_durationValue(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, IntervalVar jarg3_);
  public final static native long SolutionCollector_performedValue(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, IntervalVar jarg3_);
  public final static native int[] SolutionCollector_ForwardSequence(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, SequenceVar jarg3_);
  public final static native int[] SolutionCollector_BackwardSequence(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, SequenceVar jarg3_);
  public final static native int[] SolutionCollector_Unperformed(long jarg1, SolutionCollector jarg1_, int jarg2, long jarg3, SequenceVar jarg3_);
  public final static native long new_OptimizeVar(long jarg1, Solver jarg1_, boolean jarg2, long jarg3, IntVar jarg3_, long jarg4);
  public final static native void delete_OptimizeVar(long jarg1);
  public final static native long OptimizeVar_best(long jarg1, OptimizeVar jarg1_);
  public final static native long OptimizeVar_Var(long jarg1, OptimizeVar jarg1_);
  public final static native void OptimizeVar_enterSearch(long jarg1, OptimizeVar jarg1_);
  public final static native void OptimizeVar_beginNextDecision(long jarg1, OptimizeVar jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native void OptimizeVar_refuteDecision(long jarg1, OptimizeVar jarg1_, long jarg2, Decision jarg2_);
  public final static native boolean OptimizeVar_atSolution(long jarg1, OptimizeVar jarg1_);
  public final static native boolean OptimizeVar_acceptSolution(long jarg1, OptimizeVar jarg1_);
  public final static native String OptimizeVar_Print(long jarg1, OptimizeVar jarg1_);
  public final static native String OptimizeVar_toString(long jarg1, OptimizeVar jarg1_);
  public final static native void OptimizeVar_accept(long jarg1, OptimizeVar jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native void OptimizeVar_ApplyBound(long jarg1, OptimizeVar jarg1_);
  public final static native void delete_SearchLimit(long jarg1);
  public final static native boolean SearchLimit_crossed(long jarg1, SearchLimit jarg1_);
  public final static native boolean SearchLimit_Check(long jarg1, SearchLimit jarg1_);
  public final static native void SearchLimit_Init(long jarg1, SearchLimit jarg1_);
  public final static native void SearchLimit_Copy(long jarg1, SearchLimit jarg1_, long jarg2, SearchLimit jarg2_);
  public final static native long SearchLimit_MakeClone(long jarg1, SearchLimit jarg1_);
  public final static native void SearchLimit_enterSearch(long jarg1, SearchLimit jarg1_);
  public final static native void SearchLimit_beginNextDecision(long jarg1, SearchLimit jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native void SearchLimit_periodicCheck(long jarg1, SearchLimit jarg1_);
  public final static native void SearchLimit_refuteDecision(long jarg1, SearchLimit jarg1_, long jarg2, Decision jarg2_);
  public final static native String SearchLimit_toString(long jarg1, SearchLimit jarg1_);
  public final static native void delete_NoGood(long jarg1);
  public final static native void NoGood_AddIntegerVariableEqualValueTerm(long jarg1, NoGood jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void NoGood_AddIntegerVariableNotEqualValueTerm(long jarg1, NoGood jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native boolean NoGood_Apply(long jarg1, NoGood jarg1_, long jarg2, Solver jarg2_);
  public final static native String NoGood_toString(long jarg1, NoGood jarg1_);
  public final static native long new_NoGood();
  public final static native void delete_NoGoodManager(long jarg1);
  public final static native void NoGoodManager_Clear(long jarg1, NoGoodManager jarg1_);
  public final static native long NoGoodManager_MakeNoGood(long jarg1, NoGoodManager jarg1_);
  public final static native void NoGoodManager_AddNoGood(long jarg1, NoGoodManager jarg1_, long jarg2, NoGood jarg2_);
  public final static native int NoGoodManager_NoGoodCount(long jarg1, NoGoodManager jarg1_);
  public final static native String NoGoodManager_toString(long jarg1, NoGoodManager jarg1_);
  public final static native void NoGoodManager_enterSearch(long jarg1, NoGoodManager jarg1_);
  public final static native void NoGoodManager_beginNextDecision(long jarg1, NoGoodManager jarg1_, long jarg2, DecisionBuilder jarg2_);
  public final static native boolean NoGoodManager_acceptSolution(long jarg1, NoGoodManager jarg1_);
  public final static native long IntervalVar_kMinValidValue_get();
  public final static native long IntervalVar_kMaxValidValue_get();
  public final static native void delete_IntervalVar(long jarg1);
  public final static native long IntervalVar_StartMin(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_StartMax(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_SetStartMin(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_SetStartMax(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_SetStartRange(long jarg1, IntervalVar jarg1_, long jarg2, long jarg3);
  public final static native long IntervalVar_OldStartMin(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_OldStartMax(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_WhenStartRange__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenStartRange__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native void IntervalVar_WhenStartBound__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenStartBound__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native long IntervalVar_DurationMin(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_DurationMax(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_SetDurationMin(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_SetDurationMax(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_SetDurationRange(long jarg1, IntervalVar jarg1_, long jarg2, long jarg3);
  public final static native long IntervalVar_OldDurationMin(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_OldDurationMax(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_WhenDurationRange__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenDurationRange__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native void IntervalVar_WhenDurationBound__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenDurationBound__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native long IntervalVar_EndMin(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_EndMax(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_SetEndMin(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_SetEndMax(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_SetEndRange(long jarg1, IntervalVar jarg1_, long jarg2, long jarg3);
  public final static native long IntervalVar_OldEndMin(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_OldEndMax(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_WhenEndRange__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenEndRange__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native void IntervalVar_WhenEndBound__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenEndBound__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native boolean IntervalVar_MustBePerformed(long jarg1, IntervalVar jarg1_);
  public final static native boolean IntervalVar_MayBePerformed(long jarg1, IntervalVar jarg1_);
  public final static native boolean IntervalVar_CannotBePerformed(long jarg1, IntervalVar jarg1_);
  public final static native boolean IntervalVar_IsPerformedBound(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_SetPerformed(long jarg1, IntervalVar jarg1_, boolean jarg2);
  public final static native boolean IntervalVar_WasPerformedBound(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVar_WhenPerformedBound__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenPerformedBound__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native void IntervalVar_WhenAnything__SWIG_0(long jarg1, IntervalVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void IntervalVar_WhenAnything__SWIG_1(long jarg1, IntervalVar jarg1_, VoidToVoid jarg2);
  public final static native long IntervalVar_StartExpr(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_DurationExpr(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_EndExpr(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_PerformedExpr(long jarg1, IntervalVar jarg1_);
  public final static native long IntervalVar_SafeStartExpr(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native long IntervalVar_SafeDurationExpr(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native long IntervalVar_SafeEndExpr(long jarg1, IntervalVar jarg1_, long jarg2);
  public final static native void IntervalVar_accept(long jarg1, IntervalVar jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native long new_SequenceVar(long jarg1, Solver jarg1_, IntervalVar[] jarg2, IntVar[] jarg3, String jarg4);
  public final static native void delete_SequenceVar(long jarg1);
  public final static native String SequenceVar_toString(long jarg1, SequenceVar jarg1_);
  public final static native void SequenceVar_rankFirst(long jarg1, SequenceVar jarg1_, int jarg2);
  public final static native void SequenceVar_rankNotFirst(long jarg1, SequenceVar jarg1_, int jarg2);
  public final static native void SequenceVar_rankLast(long jarg1, SequenceVar jarg1_, int jarg2);
  public final static native void SequenceVar_rankNotLast(long jarg1, SequenceVar jarg1_, int jarg2);
  public final static native void SequenceVar_ComputePossibleFirstsAndLasts(long jarg1, SequenceVar jarg1_, long jarg2, long jarg3);
  public final static native void SequenceVar_rankSequence(long jarg1, SequenceVar jarg1_, int[] jarg2, int[] jarg3, int[] jarg4);
  public final static native void SequenceVar_FillSequence(long jarg1, SequenceVar jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SequenceVar_Interval(long jarg1, SequenceVar jarg1_, int jarg2);
  public final static native long SequenceVar_Next(long jarg1, SequenceVar jarg1_, int jarg2);
  public final static native long SequenceVar_size(long jarg1, SequenceVar jarg1_);
  public final static native void SequenceVar_accept(long jarg1, SequenceVar jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native long new_AssignmentElement();
  public final static native void AssignmentElement_activate(long jarg1, AssignmentElement jarg1_);
  public final static native void AssignmentElement_deactivate(long jarg1, AssignmentElement jarg1_);
  public final static native boolean AssignmentElement_activated(long jarg1, AssignmentElement jarg1_);
  public final static native void delete_AssignmentElement(long jarg1);
  public final static native long new_IntVarElement__SWIG_0();
  public final static native long new_IntVarElement__SWIG_1(long jarg1, IntVar jarg1_);
  public final static native void IntVarElement_reset(long jarg1, IntVarElement jarg1_, long jarg2, IntVar jarg2_);
  public final static native long IntVarElement_clone(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_copy(long jarg1, IntVarElement jarg1_, long jarg2, IntVarElement jarg2_);
  public final static native long IntVarElement_var(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_store(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_restore(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_LoadFromProto(long jarg1, IntVarElement jarg1_, long jarg2);
  public final static native void IntVarElement_WriteToProto(long jarg1, IntVarElement jarg1_, long jarg2);
  public final static native long IntVarElement_min(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_setMin(long jarg1, IntVarElement jarg1_, long jarg2);
  public final static native long IntVarElement_max(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_setMax(long jarg1, IntVarElement jarg1_, long jarg2);
  public final static native long IntVarElement_value(long jarg1, IntVarElement jarg1_);
  public final static native boolean IntVarElement_bound(long jarg1, IntVarElement jarg1_);
  public final static native void IntVarElement_setRange(long jarg1, IntVarElement jarg1_, long jarg2, long jarg3);
  public final static native void IntVarElement_setValue(long jarg1, IntVarElement jarg1_, long jarg2);
  public final static native String IntVarElement_toString(long jarg1, IntVarElement jarg1_);
  public final static native void delete_IntVarElement(long jarg1);
  public final static native long new_IntervalVarElement__SWIG_0();
  public final static native long new_IntervalVarElement__SWIG_1(long jarg1, IntervalVar jarg1_);
  public final static native void IntervalVarElement_Reset(long jarg1, IntervalVarElement jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long IntervalVarElement_Clone(long jarg1, IntervalVarElement jarg1_);
  public final static native void IntervalVarElement_Copy(long jarg1, IntervalVarElement jarg1_, long jarg2, IntervalVarElement jarg2_);
  public final static native long IntervalVarElement_Var(long jarg1, IntervalVarElement jarg1_);
  public final static native void IntervalVarElement_Store(long jarg1, IntervalVarElement jarg1_);
  public final static native void IntervalVarElement_Restore(long jarg1, IntervalVarElement jarg1_);
  public final static native void IntervalVarElement_LoadFromProto(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_WriteToProto(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native long IntervalVarElement_StartMin(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_StartMax(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_StartValue(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_DurationMin(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_DurationMax(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_DurationValue(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_EndMin(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_EndMax(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_EndValue(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_PerformedMin(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_PerformedMax(long jarg1, IntervalVarElement jarg1_);
  public final static native long IntervalVarElement_PerformedValue(long jarg1, IntervalVarElement jarg1_);
  public final static native void IntervalVarElement_SetStartMin(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetStartMax(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetStartRange(long jarg1, IntervalVarElement jarg1_, long jarg2, long jarg3);
  public final static native void IntervalVarElement_SetStartValue(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetDurationMin(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetDurationMax(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetDurationRange(long jarg1, IntervalVarElement jarg1_, long jarg2, long jarg3);
  public final static native void IntervalVarElement_SetDurationValue(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetEndMin(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetEndMax(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetEndRange(long jarg1, IntervalVarElement jarg1_, long jarg2, long jarg3);
  public final static native void IntervalVarElement_SetEndValue(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetPerformedMin(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetPerformedMax(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native void IntervalVarElement_SetPerformedRange(long jarg1, IntervalVarElement jarg1_, long jarg2, long jarg3);
  public final static native void IntervalVarElement_SetPerformedValue(long jarg1, IntervalVarElement jarg1_, long jarg2);
  public final static native String IntervalVarElement_toString(long jarg1, IntervalVarElement jarg1_);
  public final static native void delete_IntervalVarElement(long jarg1);
  public final static native long new_SequenceVarElement__SWIG_0();
  public final static native long new_SequenceVarElement__SWIG_1(long jarg1, SequenceVar jarg1_);
  public final static native void SequenceVarElement_Reset(long jarg1, SequenceVarElement jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native long SequenceVarElement_Clone(long jarg1, SequenceVarElement jarg1_);
  public final static native void SequenceVarElement_Copy(long jarg1, SequenceVarElement jarg1_, long jarg2, SequenceVarElement jarg2_);
  public final static native long SequenceVarElement_Var(long jarg1, SequenceVarElement jarg1_);
  public final static native void SequenceVarElement_Store(long jarg1, SequenceVarElement jarg1_);
  public final static native void SequenceVarElement_Restore(long jarg1, SequenceVarElement jarg1_);
  public final static native void SequenceVarElement_LoadFromProto(long jarg1, SequenceVarElement jarg1_, long jarg2);
  public final static native void SequenceVarElement_WriteToProto(long jarg1, SequenceVarElement jarg1_, long jarg2);
  public final static native int[] SequenceVarElement_ForwardSequence(long jarg1, SequenceVarElement jarg1_);
  public final static native int[] SequenceVarElement_BackwardSequence(long jarg1, SequenceVarElement jarg1_);
  public final static native int[] SequenceVarElement_Unperformed(long jarg1, SequenceVarElement jarg1_);
  public final static native void SequenceVarElement_SetSequence(long jarg1, SequenceVarElement jarg1_, int[] jarg2, int[] jarg3, int[] jarg4);
  public final static native void SequenceVarElement_SetForwardSequence(long jarg1, SequenceVarElement jarg1_, int[] jarg2);
  public final static native void SequenceVarElement_SetBackwardSequence(long jarg1, SequenceVarElement jarg1_, int[] jarg2);
  public final static native void SequenceVarElement_SetUnperformed(long jarg1, SequenceVarElement jarg1_, int[] jarg2);
  public final static native String SequenceVarElement_toString(long jarg1, SequenceVarElement jarg1_);
  public final static native void delete_SequenceVarElement(long jarg1);
  public final static native long new_Assignment__SWIG_0(long jarg1, Solver jarg1_);
  public final static native long new_Assignment__SWIG_1(long jarg1, Assignment jarg1_);
  public final static native void delete_Assignment(long jarg1);
  public final static native void Assignment_clear(long jarg1, Assignment jarg1_);
  public final static native boolean Assignment_empty(long jarg1, Assignment jarg1_);
  public final static native int Assignment_size(long jarg1, Assignment jarg1_);
  public final static native int Assignment_NumIntVars(long jarg1, Assignment jarg1_);
  public final static native int Assignment_NumIntervalVars(long jarg1, Assignment jarg1_);
  public final static native int Assignment_NumSequenceVars(long jarg1, Assignment jarg1_);
  public final static native void Assignment_store(long jarg1, Assignment jarg1_);
  public final static native void Assignment_restore(long jarg1, Assignment jarg1_);
  public final static native boolean Assignment_load__SWIG_0(long jarg1, Assignment jarg1_, String jarg2);
  public final static native void Assignment_load__SWIG_1(long jarg1, Assignment jarg1_, long jarg2);
  public final static native boolean Assignment_save__SWIG_0(long jarg1, Assignment jarg1_, String jarg2);
  public final static native void Assignment_save__SWIG_1(long jarg1, Assignment jarg1_, long jarg2);
  public final static native void Assignment_addObjective(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native long Assignment_objective(long jarg1, Assignment jarg1_);
  public final static native boolean Assignment_hasObjective(long jarg1, Assignment jarg1_);
  public final static native long Assignment_objectiveMin(long jarg1, Assignment jarg1_);
  public final static native long Assignment_objectiveMax(long jarg1, Assignment jarg1_);
  public final static native long Assignment_objectiveValue(long jarg1, Assignment jarg1_);
  public final static native boolean Assignment_objectiveBound(long jarg1, Assignment jarg1_);
  public final static native void Assignment_setObjectiveMin(long jarg1, Assignment jarg1_, long jarg2);
  public final static native void Assignment_setObjectiveMax(long jarg1, Assignment jarg1_, long jarg2);
  public final static native void Assignment_setObjectiveValue(long jarg1, Assignment jarg1_, long jarg2);
  public final static native void Assignment_setObjectiveRange(long jarg1, Assignment jarg1_, long jarg2, long jarg3);
  public final static native long Assignment_add__SWIG_0(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Assignment_add__SWIG_1(long jarg1, Assignment jarg1_, IntVar[] jarg2);
  public final static native long Assignment_FastAdd__SWIG_0(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native long Assignment_min(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native long Assignment_max(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native long Assignment_value(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native boolean Assignment_bound(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Assignment_setMin(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void Assignment_setMax(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void Assignment_setRange(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4);
  public final static native void Assignment_setValue(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native long Assignment_add__SWIG_2(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native void Assignment_add__SWIG_3(long jarg1, Assignment jarg1_, IntervalVar[] jarg2);
  public final static native long Assignment_FastAdd__SWIG_1(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_startMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_startMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_startValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_durationMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_durationMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_durationValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_endMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_endMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_endValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_performedMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_performedMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native long Assignment_performedValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native void Assignment_setStartMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setStartMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setStartRange(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void Assignment_setStartValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setDurationMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setDurationMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setDurationRange(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void Assignment_setDurationValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setEndMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setEndMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setEndRange(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void Assignment_setEndValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setPerformedMin(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setPerformedMax(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void Assignment_setPerformedRange(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void Assignment_setPerformedValue(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native long Assignment_add__SWIG_4(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void Assignment_add__SWIG_5(long jarg1, Assignment jarg1_, SequenceVar[] jarg2);
  public final static native long Assignment_FastAdd__SWIG_2(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native int[] Assignment_ForwardSequence(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native int[] Assignment_BackwardSequence(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native int[] Assignment_Unperformed(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void Assignment_SetSequence(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_, int[] jarg3, int[] jarg4, int[] jarg5);
  public final static native void Assignment_SetForwardSequence(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_, int[] jarg3);
  public final static native void Assignment_SetBackwardSequence(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_, int[] jarg3);
  public final static native void Assignment_SetUnperformed(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_, int[] jarg3);
  public final static native void Assignment_activate__SWIG_0(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Assignment_deactivate__SWIG_0(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native boolean Assignment_activated__SWIG_0(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Assignment_activate__SWIG_1(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native void Assignment_deactivate__SWIG_1(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native boolean Assignment_activated__SWIG_1(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native void Assignment_activate__SWIG_2(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void Assignment_deactivate__SWIG_2(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native boolean Assignment_activated__SWIG_2(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void Assignment_activateObjective(long jarg1, Assignment jarg1_);
  public final static native void Assignment_deactivateObjective(long jarg1, Assignment jarg1_);
  public final static native boolean Assignment_activatedObjective(long jarg1, Assignment jarg1_);
  public final static native String Assignment_toString(long jarg1, Assignment jarg1_);
  public final static native boolean Assignment_contains__SWIG_0(long jarg1, Assignment jarg1_, long jarg2, IntVar jarg2_);
  public final static native boolean Assignment_contains__SWIG_1(long jarg1, Assignment jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native boolean Assignment_contains__SWIG_2(long jarg1, Assignment jarg1_, long jarg2, SequenceVar jarg2_);
  public final static native void Assignment_CopyIntersection(long jarg1, Assignment jarg1_, long jarg2, Assignment jarg2_);
  public final static native void Assignment_copy(long jarg1, Assignment jarg1_, long jarg2, Assignment jarg2_);
  public final static native long Assignment_intVarContainer(long jarg1, Assignment jarg1_);
  public final static native long Assignment_MutableIntVarContainer(long jarg1, Assignment jarg1_);
  public final static native long Assignment_IntervalVarContainer(long jarg1, Assignment jarg1_);
  public final static native long Assignment_MutableIntervalVarContainer(long jarg1, Assignment jarg1_);
  public final static native long Assignment_SequenceVarContainer(long jarg1, Assignment jarg1_);
  public final static native long Assignment_MutableSequenceVarContainer(long jarg1, Assignment jarg1_);
  public final static native void SetAssignmentFromAssignment(long jarg1, Assignment jarg1_, IntVar[] jarg2, long jarg3, Assignment jarg3_, IntVar[] jarg4);
  public final static native long new_Pack(long jarg1, Solver jarg1_, IntVar[] jarg2, int jarg3);
  public final static native void delete_Pack(long jarg1);
  public final static native void Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_0(long jarg1, Pack jarg1_, long[] jarg2, long[] jarg3);
  public final static native void Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_1(long jarg1, Pack jarg1_, LongToLong jarg2, long[] jarg3);
  public final static native void Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_2(long jarg1, Pack jarg1_, LongLongToLong jarg2, long[] jarg3);
  public final static native void Pack_AddWeightedSumEqualVarDimension__SWIG_0(long jarg1, Pack jarg1_, long[] jarg2, IntVar[] jarg3);
  public final static native void Pack_AddWeightedSumEqualVarDimension__SWIG_1(long jarg1, Pack jarg1_, LongLongToLong jarg2, IntVar[] jarg3);
  public final static native void Pack_AddSumVariableWeightsLessOrEqualConstantDimension(long jarg1, Pack jarg1_, IntVar[] jarg2, long[] jarg3);
  public final static native void Pack_AddWeightedSumOfAssignedDimension(long jarg1, Pack jarg1_, long[] jarg2, long jarg3, IntVar jarg3_);
  public final static native void Pack_AddCountUsedBinDimension(long jarg1, Pack jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Pack_AddCountAssignedItemsDimension(long jarg1, Pack jarg1_, long jarg2, IntVar jarg2_);
  public final static native void Pack_Post(long jarg1, Pack jarg1_);
  public final static native void Pack_ClearAll(long jarg1, Pack jarg1_);
  public final static native void Pack_PropagateDelayed(long jarg1, Pack jarg1_);
  public final static native void Pack_InitialPropagate(long jarg1, Pack jarg1_);
  public final static native void Pack_Propagate(long jarg1, Pack jarg1_);
  public final static native void Pack_OneDomain(long jarg1, Pack jarg1_, int jarg2);
  public final static native String Pack_toString(long jarg1, Pack jarg1_);
  public final static native boolean Pack_IsUndecided(long jarg1, Pack jarg1_, int jarg2, int jarg3);
  public final static native void Pack_SetImpossible(long jarg1, Pack jarg1_, int jarg2, int jarg3);
  public final static native void Pack_Assign(long jarg1, Pack jarg1_, int jarg2, int jarg3);
  public final static native boolean Pack_IsAssignedStatusKnown(long jarg1, Pack jarg1_, int jarg2);
  public final static native boolean Pack_IsPossible(long jarg1, Pack jarg1_, int jarg2, int jarg3);
  public final static native long Pack_AssignVar(long jarg1, Pack jarg1_, int jarg2, int jarg3);
  public final static native void Pack_SetAssigned(long jarg1, Pack jarg1_, int jarg2);
  public final static native void Pack_SetUnassigned(long jarg1, Pack jarg1_, int jarg2);
  public final static native void Pack_RemoveAllPossibleFromBin(long jarg1, Pack jarg1_, int jarg2);
  public final static native void Pack_AssignAllPossibleToBin(long jarg1, Pack jarg1_, int jarg2);
  public final static native void Pack_AssignFirstPossibleToBin(long jarg1, Pack jarg1_, int jarg2);
  public final static native void Pack_AssignAllRemainingItems(long jarg1, Pack jarg1_);
  public final static native void Pack_UnassignAllRemainingItems(long jarg1, Pack jarg1_);
  public final static native void Pack_accept(long jarg1, Pack jarg1_, long jarg2, ModelVisitor jarg2_);
  public final static native void delete_DisjunctiveConstraint(long jarg1);
  public final static native long DisjunctiveConstraint_makeSequenceVar(long jarg1, DisjunctiveConstraint jarg1_);
  public final static native void DisjunctiveConstraint_SetTransitionTime(long jarg1, DisjunctiveConstraint jarg1_, LongLongToLong jarg2);
  public final static native long DisjunctiveConstraint_TransitionTime(long jarg1, DisjunctiveConstraint jarg1_, int jarg2, int jarg3);
  public final static native void delete_SolutionPool(long jarg1);
  public final static native void SolutionPool_Initialize(long jarg1, SolutionPool jarg1_, long jarg2, Assignment jarg2_);
  public final static native void SolutionPool_RegisterNewSolution(long jarg1, SolutionPool jarg1_, long jarg2, Assignment jarg2_);
  public final static native void SolutionPool_GetNextSolution(long jarg1, SolutionPool jarg1_, long jarg2, Assignment jarg2_);
  public final static native boolean SolutionPool_SyncNeeded(long jarg1, SolutionPool jarg1_, long jarg2, Assignment jarg2_);
  public final static native void delete_BaseIntExpr(long jarg1);
  public final static native long BaseIntExpr_var(long jarg1, BaseIntExpr jarg1_);
  public final static native long BaseIntExpr_CastToVar(long jarg1, BaseIntExpr jarg1_);
  public final static native int UNSPECIFIED_get();
  public final static native int DOMAIN_INT_VAR_get();
  public final static native int BOOLEAN_VAR_get();
  public final static native int CONST_VAR_get();
  public final static native int VAR_ADD_CST_get();
  public final static native int VAR_TIMES_CST_get();
  public final static native int CST_SUB_VAR_get();
  public final static native int OPP_VAR_get();
  public final static native int TRACE_VAR_get();
  public final static native long new_LocalSearchOperator();
  public final static native void delete_LocalSearchOperator(long jarg1);
  public final static native boolean LocalSearchOperator_nextNeighbor(long jarg1, LocalSearchOperator jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void LocalSearchOperator_start(long jarg1, LocalSearchOperator jarg1_, long jarg2, Assignment jarg2_);
  public final static native void LocalSearchOperator_director_connect(LocalSearchOperator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void LocalSearchOperator_change_ownership(LocalSearchOperator obj, long cptr, boolean take_or_release);
  public final static native void IntVarLocalSearchHandler_AddToAssignment(long jarg1, IntVarLocalSearchHandler jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4, long jarg5, Assignment jarg5_);
  public final static native boolean IntVarLocalSearchHandler_ValueFromAssignent(long jarg1, IntVarLocalSearchHandler jarg1_, long jarg2, Assignment jarg2_, long jarg3, IntVar jarg3_, long jarg4, long jarg5);
  public final static native void IntVarLocalSearchHandler_OnRevertChanges(long jarg1, IntVarLocalSearchHandler jarg1_, long jarg2);
  public final static native void IntVarLocalSearchHandler_OnAddVars(long jarg1, IntVarLocalSearchHandler jarg1_);
  public final static native long new_IntVarLocalSearchHandler();
  public final static native void delete_IntVarLocalSearchHandler(long jarg1);
  public final static native void delete_IntVarLocalSearchOperatorTemplate(long jarg1);
  public final static native void IntVarLocalSearchOperatorTemplate_start(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2, Assignment jarg2_);
  public final static native boolean IntVarLocalSearchOperatorTemplate_isIncremental(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_);
  public final static native int IntVarLocalSearchOperatorTemplate_size(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_);
  public final static native long IntVarLocalSearchOperatorTemplate_value(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native long IntVarLocalSearchOperatorTemplate_var(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native boolean IntVarLocalSearchOperatorTemplate_SkipUnchanged(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, int jarg2);
  public final static native long IntVarLocalSearchOperatorTemplate_oldValue(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native void IntVarLocalSearchOperatorTemplate_setValue(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2, long jarg3);
  public final static native boolean IntVarLocalSearchOperatorTemplate_activated(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native void IntVarLocalSearchOperatorTemplate_activate(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native void IntVarLocalSearchOperatorTemplate_deactivate(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native boolean IntVarLocalSearchOperatorTemplate_ApplyChanges(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void IntVarLocalSearchOperatorTemplate_RevertChanges(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, boolean jarg2);
  public final static native void IntVarLocalSearchOperatorTemplate_addVars(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_, IntVar[] jarg2);
  public final static native void IntVarLocalSearchOperatorTemplate_onStart(long jarg1, IntVarLocalSearchOperatorTemplate jarg1_);
  public final static native long new_IntVarLocalSearchOperator__SWIG_0();
  public final static native long new_IntVarLocalSearchOperator__SWIG_1(IntVar[] jarg1);
  public final static native void delete_IntVarLocalSearchOperator(long jarg1);
  public final static native boolean IntVarLocalSearchOperator_oneNeighbor(long jarg1, IntVarLocalSearchOperator jarg1_);
  public final static native boolean IntVarLocalSearchOperator_oneNeighborSwigExplicitIntVarLocalSearchOperator(long jarg1, IntVarLocalSearchOperator jarg1_);
  public final static native void IntVarLocalSearchOperator_director_connect(IntVarLocalSearchOperator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IntVarLocalSearchOperator_change_ownership(IntVarLocalSearchOperator obj, long cptr, boolean take_or_release);
  public final static native long new_SequenceVarLocalSearchHandler__SWIG_0();
  public final static native long new_SequenceVarLocalSearchHandler__SWIG_1(long jarg1, SequenceVarLocalSearchHandler jarg1_);
  public final static native long new_SequenceVarLocalSearchHandler__SWIG_2(long jarg1, SequenceVarLocalSearchOperator jarg1_);
  public final static native void SequenceVarLocalSearchHandler_AddToAssignment(long jarg1, SequenceVarLocalSearchHandler jarg1_, long jarg2, SequenceVar jarg2_, int[] jarg3, long jarg4, long jarg5, Assignment jarg5_);
  public final static native boolean SequenceVarLocalSearchHandler_ValueFromAssignent(long jarg1, SequenceVarLocalSearchHandler jarg1_, long jarg2, Assignment jarg2_, long jarg3, SequenceVar jarg3_, long jarg4, long jarg5);
  public final static native void SequenceVarLocalSearchHandler_OnRevertChanges(long jarg1, SequenceVarLocalSearchHandler jarg1_, long jarg2);
  public final static native void SequenceVarLocalSearchHandler_OnAddVars(long jarg1, SequenceVarLocalSearchHandler jarg1_);
  public final static native void delete_SequenceVarLocalSearchHandler(long jarg1);
  public final static native void delete_SequenceVarLocalSearchOperatorTemplate(long jarg1);
  public final static native void SequenceVarLocalSearchOperatorTemplate_start(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2, Assignment jarg2_);
  public final static native boolean SequenceVarLocalSearchOperatorTemplate_isIncremental(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_);
  public final static native int SequenceVarLocalSearchOperatorTemplate_size(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_);
  public final static native int[] SequenceVarLocalSearchOperatorTemplate_value(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native long SequenceVarLocalSearchOperatorTemplate_var(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native boolean SequenceVarLocalSearchOperatorTemplate_SkipUnchanged(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, int jarg2);
  public final static native int[] SequenceVarLocalSearchOperatorTemplate_oldValue(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native void SequenceVarLocalSearchOperatorTemplate_setValue(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2, int[] jarg3);
  public final static native boolean SequenceVarLocalSearchOperatorTemplate_activated(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native void SequenceVarLocalSearchOperatorTemplate_activate(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native void SequenceVarLocalSearchOperatorTemplate_deactivate(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2);
  public final static native boolean SequenceVarLocalSearchOperatorTemplate_ApplyChanges(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void SequenceVarLocalSearchOperatorTemplate_RevertChanges(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, boolean jarg2);
  public final static native void SequenceVarLocalSearchOperatorTemplate_addVars(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_, SequenceVar[] jarg2);
  public final static native void SequenceVarLocalSearchOperatorTemplate_onStart(long jarg1, SequenceVarLocalSearchOperatorTemplate jarg1_);
  public final static native long new_SequenceVarLocalSearchOperator__SWIG_0();
  public final static native long new_SequenceVarLocalSearchOperator__SWIG_1(SequenceVar[] jarg1);
  public final static native void delete_SequenceVarLocalSearchOperator(long jarg1);
  public final static native int[] SequenceVarLocalSearchOperator_Sequence(long jarg1, SequenceVarLocalSearchOperator jarg1_, long jarg2);
  public final static native int[] SequenceVarLocalSearchOperator_OldSequence(long jarg1, SequenceVarLocalSearchOperator jarg1_, long jarg2);
  public final static native void SequenceVarLocalSearchOperator_SetForwardSequence(long jarg1, SequenceVarLocalSearchOperator jarg1_, long jarg2, int[] jarg3);
  public final static native void SequenceVarLocalSearchOperator_SetBackwardSequence(long jarg1, SequenceVarLocalSearchOperator jarg1_, long jarg2, int[] jarg3);
  public final static native void SequenceVarLocalSearchOperator_director_connect(SequenceVarLocalSearchOperator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SequenceVarLocalSearchOperator_change_ownership(SequenceVarLocalSearchOperator obj, long cptr, boolean take_or_release);
  public final static native long new_BaseLns(IntVar[] jarg1);
  public final static native void delete_BaseLns(long jarg1);
  public final static native void BaseLns_initFragments(long jarg1, BaseLns jarg1_);
  public final static native void BaseLns_initFragmentsSwigExplicitBaseLns(long jarg1, BaseLns jarg1_);
  public final static native boolean BaseLns_nextFragment(long jarg1, BaseLns jarg1_);
  public final static native void BaseLns_appendToFragment(long jarg1, BaseLns jarg1_, int jarg2);
  public final static native int BaseLns_fragmentSize(long jarg1, BaseLns jarg1_);
  public final static native void BaseLns_director_connect(BaseLns obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void BaseLns_change_ownership(BaseLns obj, long cptr, boolean take_or_release);
  public final static native long new_ChangeValue(IntVar[] jarg1);
  public final static native void delete_ChangeValue(long jarg1);
  public final static native long ChangeValue_modifyValue(long jarg1, ChangeValue jarg1_, long jarg2, long jarg3);
  public final static native boolean ChangeValue_oneNeighbor(long jarg1, ChangeValue jarg1_);
  public final static native boolean ChangeValue_oneNeighborSwigExplicitChangeValue(long jarg1, ChangeValue jarg1_);
  public final static native void ChangeValue_director_connect(ChangeValue obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ChangeValue_change_ownership(ChangeValue obj, long cptr, boolean take_or_release);
  public final static native long new_PathOperator(IntVar[] jarg1, IntVar[] jarg2, int jarg3, long jarg4);
  public final static native void delete_PathOperator(long jarg1);
  public final static native boolean PathOperator_neighbor(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_SkipUnchanged(long jarg1, PathOperator jarg1_, int jarg2);
  public final static native boolean PathOperator_SkipUnchangedSwigExplicitPathOperator(long jarg1, PathOperator jarg1_, int jarg2);
  public final static native long PathOperator_Next(long jarg1, PathOperator jarg1_, long jarg2);
  public final static native long PathOperator_Path(long jarg1, PathOperator jarg1_, long jarg2);
  public final static native int PathOperator_number_of_nexts(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_oneNeighbor(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_oneNeighborSwigExplicitPathOperator(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_RestartAtPathStartOnSynchronize(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_RestartAtPathStartOnSynchronizeSwigExplicitPathOperator(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_OnSamePathAsPreviousBase(long jarg1, PathOperator jarg1_, long jarg2);
  public final static native boolean PathOperator_OnSamePathAsPreviousBaseSwigExplicitPathOperator(long jarg1, PathOperator jarg1_, long jarg2);
  public final static native long PathOperator_GetBaseNodeRestartPosition(long jarg1, PathOperator jarg1_, int jarg2);
  public final static native long PathOperator_GetBaseNodeRestartPositionSwigExplicitPathOperator(long jarg1, PathOperator jarg1_, int jarg2);
  public final static native void PathOperator_SetNextBaseToIncrement(long jarg1, PathOperator jarg1_, long jarg2);
  public final static native void PathOperator_SetNextBaseToIncrementSwigExplicitPathOperator(long jarg1, PathOperator jarg1_, long jarg2);
  public final static native boolean PathOperator_InitPosition(long jarg1, PathOperator jarg1_);
  public final static native boolean PathOperator_InitPositionSwigExplicitPathOperator(long jarg1, PathOperator jarg1_);
  public final static native void PathOperator_director_connect(PathOperator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void PathOperator_change_ownership(PathOperator obj, long cptr, boolean take_or_release);
  public final static native void delete_PathWithPreviousNodesOperator(long jarg1);
  public final static native boolean PathWithPreviousNodesOperator_IsPathStart(long jarg1, PathWithPreviousNodesOperator jarg1_, long jarg2);
  public final static native long PathWithPreviousNodesOperator_Prev(long jarg1, PathWithPreviousNodesOperator jarg1_, long jarg2);
  public final static native String PathWithPreviousNodesOperator_toString(long jarg1, PathWithPreviousNodesOperator jarg1_);
  public final static native boolean LocalSearchFilter_accept(long jarg1, LocalSearchFilter jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void LocalSearchFilter_synchronize(long jarg1, LocalSearchFilter jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native boolean LocalSearchFilter_isIncremental(long jarg1, LocalSearchFilter jarg1_);
  public final static native void delete_LocalSearchFilter(long jarg1);
  public final static native long new_IntVarLocalSearchFilter__SWIG_0(IntVar[] jarg1, LongToVoid jarg2);
  public final static native long new_IntVarLocalSearchFilter__SWIG_1(IntVar[] jarg1);
  public final static native void delete_IntVarLocalSearchFilter(long jarg1);
  public final static native void IntVarLocalSearchFilter_synchronize(long jarg1, IntVarLocalSearchFilter jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void IntVarLocalSearchFilter_InjectObjectiveValue(long jarg1, IntVarLocalSearchFilter jarg1_, long jarg2);
  public final static native void IntVarLocalSearchFilter_InjectObjectiveValueSwigExplicitIntVarLocalSearchFilter(long jarg1, IntVarLocalSearchFilter jarg1_, long jarg2);
  public final static native void IntVarLocalSearchFilter_addVars(long jarg1, IntVarLocalSearchFilter jarg1_, IntVar[] jarg2);
  public final static native int IntVarLocalSearchFilter_size(long jarg1, IntVarLocalSearchFilter jarg1_);
  public final static native long IntVarLocalSearchFilter_var(long jarg1, IntVarLocalSearchFilter jarg1_, int jarg2);
  public final static native long IntVarLocalSearchFilter_value(long jarg1, IntVarLocalSearchFilter jarg1_, int jarg2);
  public final static native boolean IntVarLocalSearchFilter_IsVarSynced(long jarg1, IntVarLocalSearchFilter jarg1_, int jarg2);
  public final static native void IntVarLocalSearchFilter_onSynchronize(long jarg1, IntVarLocalSearchFilter jarg1_, long jarg2, Assignment jarg2_);
  public final static native void IntVarLocalSearchFilter_onSynchronizeSwigExplicitIntVarLocalSearchFilter(long jarg1, IntVarLocalSearchFilter jarg1_, long jarg2, Assignment jarg2_);
  public final static native int IntVarLocalSearchFilter_index(long jarg1, IntVarLocalSearchFilter jarg1_, long jarg2, IntVar jarg2_);
  public final static native void IntVarLocalSearchFilter_director_connect(IntVarLocalSearchFilter obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IntVarLocalSearchFilter_change_ownership(IntVarLocalSearchFilter obj, long cptr, boolean take_or_release);
  public final static native void delete_PropagationMonitor(long jarg1);
  public final static native void PropagationMonitor_BeginConstraintInitialPropagation(long jarg1, PropagationMonitor jarg1_, long jarg2, Constraint jarg2_);
  public final static native void PropagationMonitor_EndConstraintInitialPropagation(long jarg1, PropagationMonitor jarg1_, long jarg2, Constraint jarg2_);
  public final static native void PropagationMonitor_BeginNestedConstraintInitialPropagation(long jarg1, PropagationMonitor jarg1_, long jarg2, Constraint jarg2_, long jarg3, Constraint jarg3_);
  public final static native void PropagationMonitor_EndNestedConstraintInitialPropagation(long jarg1, PropagationMonitor jarg1_, long jarg2, Constraint jarg2_, long jarg3, Constraint jarg3_);
  public final static native void PropagationMonitor_RegisterDemon(long jarg1, PropagationMonitor jarg1_, long jarg2, Demon jarg2_);
  public final static native void PropagationMonitor_BeginDemonRun(long jarg1, PropagationMonitor jarg1_, long jarg2, Demon jarg2_);
  public final static native void PropagationMonitor_EndDemonRun(long jarg1, PropagationMonitor jarg1_, long jarg2, Demon jarg2_);
  public final static native void PropagationMonitor_StartProcessingIntegerVariable(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_);
  public final static native void PropagationMonitor_EndProcessingIntegerVariable(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_);
  public final static native void PropagationMonitor_PushContext(long jarg1, PropagationMonitor jarg1_, String jarg2);
  public final static native void PropagationMonitor_PopContext(long jarg1, PropagationMonitor jarg1_);
  public final static native void PropagationMonitor_setMin__SWIG_0(long jarg1, PropagationMonitor jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native void PropagationMonitor_setMax__SWIG_0(long jarg1, PropagationMonitor jarg1_, long jarg2, IntExpr jarg2_, long jarg3);
  public final static native void PropagationMonitor_setRange__SWIG_0(long jarg1, PropagationMonitor jarg1_, long jarg2, IntExpr jarg2_, long jarg3, long jarg4);
  public final static native void PropagationMonitor_setMin__SWIG_1(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_setMax__SWIG_1(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_setRange__SWIG_1(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4);
  public final static native void PropagationMonitor_RemoveValue(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_setValue__SWIG_0(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_RemoveInterval(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4);
  public final static native void PropagationMonitor_setValue__SWIG_1(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long[] jarg3);
  public final static native void PropagationMonitor_RemoveValues(long jarg1, PropagationMonitor jarg1_, long jarg2, IntVar jarg2_, long[] jarg3);
  public final static native void PropagationMonitor_SetStartMin(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_SetStartMax(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_SetStartRange(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void PropagationMonitor_SetEndMin(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_SetEndMax(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_SetEndRange(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void PropagationMonitor_SetDurationMin(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_SetDurationMax(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3);
  public final static native void PropagationMonitor_SetDurationRange(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, long jarg3, long jarg4);
  public final static native void PropagationMonitor_SetPerformed(long jarg1, PropagationMonitor jarg1_, long jarg2, IntervalVar jarg2_, boolean jarg3);
  public final static native void PropagationMonitor_RankFirst(long jarg1, PropagationMonitor jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native void PropagationMonitor_RankNotFirst(long jarg1, PropagationMonitor jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native void PropagationMonitor_RankLast(long jarg1, PropagationMonitor jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native void PropagationMonitor_RankNotLast(long jarg1, PropagationMonitor jarg1_, long jarg2, SequenceVar jarg2_, int jarg3);
  public final static native void PropagationMonitor_RankSequence(long jarg1, PropagationMonitor jarg1_, long jarg2, SequenceVar jarg2_, int[] jarg3, int[] jarg4, int[] jarg5);
  public final static native void PropagationMonitor_Install(long jarg1, PropagationMonitor jarg1_);
  public final static native void delete_LocalSearchMonitor(long jarg1);
  public final static native void LocalSearchMonitor_BeginOperatorStart(long jarg1, LocalSearchMonitor jarg1_);
  public final static native void LocalSearchMonitor_EndOperatorStart(long jarg1, LocalSearchMonitor jarg1_);
  public final static native void LocalSearchMonitor_BeginMakeNextNeighbor(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchOperator jarg2_);
  public final static native void LocalSearchMonitor_EndMakeNextNeighbor(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchOperator jarg2_, boolean jarg3, long jarg4, Assignment jarg4_, long jarg5, Assignment jarg5_);
  public final static native void LocalSearchMonitor_BeginFilterNeighbor(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchOperator jarg2_);
  public final static native void LocalSearchMonitor_EndFilterNeighbor(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchOperator jarg2_, boolean jarg3);
  public final static native void LocalSearchMonitor_BeginAcceptNeighbor(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchOperator jarg2_);
  public final static native void LocalSearchMonitor_EndAcceptNeighbor(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchOperator jarg2_, boolean jarg3);
  public final static native void LocalSearchMonitor_BeginFiltering(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchFilter jarg2_);
  public final static native void LocalSearchMonitor_EndFiltering(long jarg1, LocalSearchMonitor jarg1_, long jarg2, LocalSearchFilter jarg2_, boolean jarg3);
  public final static native void LocalSearchMonitor_Install(long jarg1, LocalSearchMonitor jarg1_);
  public final static native int BooleanVar_kUnboundBooleanVarValue_get();
  public final static native void delete_BooleanVar(long jarg1);
  public final static native long BooleanVar_min(long jarg1, BooleanVar jarg1_);
  public final static native void BooleanVar_setMin(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native long BooleanVar_max(long jarg1, BooleanVar jarg1_);
  public final static native void BooleanVar_setMax(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native void BooleanVar_setRange(long jarg1, BooleanVar jarg1_, long jarg2, long jarg3);
  public final static native boolean BooleanVar_bound(long jarg1, BooleanVar jarg1_);
  public final static native long BooleanVar_value(long jarg1, BooleanVar jarg1_);
  public final static native void BooleanVar_removeValue(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native void BooleanVar_removeInterval(long jarg1, BooleanVar jarg1_, long jarg2, long jarg3);
  public final static native void BooleanVar_WhenBound(long jarg1, BooleanVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void BooleanVar_WhenRange(long jarg1, BooleanVar jarg1_, long jarg2, Demon jarg2_);
  public final static native void BooleanVar_WhenDomain(long jarg1, BooleanVar jarg1_, long jarg2, Demon jarg2_);
  public final static native java.math.BigInteger BooleanVar_Size(long jarg1, BooleanVar jarg1_);
  public final static native boolean BooleanVar_contains(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native long BooleanVar_MakeHoleIterator(long jarg1, BooleanVar jarg1_, boolean jarg2);
  public final static native long BooleanVar_MakeDomainIterator(long jarg1, BooleanVar jarg1_, boolean jarg2);
  public final static native String BooleanVar_toString(long jarg1, BooleanVar jarg1_);
  public final static native int BooleanVar_VarType(long jarg1, BooleanVar jarg1_);
  public final static native long BooleanVar_IsEqual(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native long BooleanVar_IsDifferent(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native long BooleanVar_IsGreaterOrEqual(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native long BooleanVar_IsLessOrEqual(long jarg1, BooleanVar jarg1_, long jarg2);
  public final static native void BooleanVar_RestoreValue(long jarg1, BooleanVar jarg1_);
  public final static native String BooleanVar_BaseName(long jarg1, BooleanVar jarg1_);
  public final static native int BooleanVar_RawValue(long jarg1, BooleanVar jarg1_);
  public final static native long new_SymmetryBreaker();
  public final static native void delete_SymmetryBreaker(long jarg1);
  public final static native void SymmetryBreaker_AddIntegerVariableEqualValueClause(long jarg1, SymmetryBreaker jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void SymmetryBreaker_AddIntegerVariableGreaterOrEqualValueClause(long jarg1, SymmetryBreaker jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void SymmetryBreaker_AddIntegerVariableLessOrEqualValueClause(long jarg1, SymmetryBreaker jarg1_, long jarg2, IntVar jarg2_, long jarg3);
  public final static native void SymmetryBreaker_director_connect(SymmetryBreaker obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SymmetryBreaker_change_ownership(SymmetryBreaker obj, long cptr, boolean take_or_release);
  public final static native long new_SearchLog(long jarg1, Solver jarg1_, long jarg2, OptimizeVar jarg2_, long jarg3, IntVar jarg3_, VoidToString jarg4, int jarg5);
  public final static native void delete_SearchLog(long jarg1);
  public final static native void SearchLog_enterSearch(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_ExitSearch(long jarg1, SearchLog jarg1_);
  public final static native boolean SearchLog_atSolution(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_beginFail(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_noMoreSolutions(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_applyDecision(long jarg1, SearchLog jarg1_, long jarg2, Decision jarg2_);
  public final static native void SearchLog_refuteDecision(long jarg1, SearchLog jarg1_, long jarg2, Decision jarg2_);
  public final static native void SearchLog_OutputDecision(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_Maintain(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_beginInitialPropagation(long jarg1, SearchLog jarg1_);
  public final static native void SearchLog_endInitialPropagation(long jarg1, SearchLog jarg1_);
  public final static native String SearchLog_toString(long jarg1, SearchLog jarg1_);
  public final static native int ModelCache_VOID_FALSE_CONSTRAINT_get();
  public final static native int ModelCache_VOID_TRUE_CONSTRAINT_get();
  public final static native int ModelCache_VOID_CONSTRAINT_MAX_get();
  public final static native int ModelCache_VAR_CONSTANT_EQUALITY_get();
  public final static native int ModelCache_VAR_CONSTANT_GREATER_OR_EQUAL_get();
  public final static native int ModelCache_VAR_CONSTANT_LESS_OR_EQUAL_get();
  public final static native int ModelCache_VAR_CONSTANT_NON_EQUALITY_get();
  public final static native int ModelCache_VAR_CONSTANT_CONSTRAINT_MAX_get();
  public final static native int ModelCache_VAR_CONSTANT_CONSTANT_BETWEEN_get();
  public final static native int ModelCache_VAR_CONSTANT_CONSTANT_CONSTRAINT_MAX_get();
  public final static native int ModelCache_EXPR_EXPR_EQUALITY_get();
  public final static native int ModelCache_EXPR_EXPR_GREATER_get();
  public final static native int ModelCache_EXPR_EXPR_GREATER_OR_EQUAL_get();
  public final static native int ModelCache_EXPR_EXPR_LESS_get();
  public final static native int ModelCache_EXPR_EXPR_LESS_OR_EQUAL_get();
  public final static native int ModelCache_EXPR_EXPR_NON_EQUALITY_get();
  public final static native int ModelCache_EXPR_EXPR_CONSTRAINT_MAX_get();
  public final static native int ModelCache_EXPR_OPPOSITE_get();
  public final static native int ModelCache_EXPR_ABS_get();
  public final static native int ModelCache_EXPR_SQUARE_get();
  public final static native int ModelCache_EXPR_EXPRESSION_MAX_get();
  public final static native int ModelCache_EXPR_EXPR_DIFFERENCE_get();
  public final static native int ModelCache_EXPR_EXPR_PROD_get();
  public final static native int ModelCache_EXPR_EXPR_DIV_get();
  public final static native int ModelCache_EXPR_EXPR_MAX_get();
  public final static native int ModelCache_EXPR_EXPR_MIN_get();
  public final static native int ModelCache_EXPR_EXPR_SUM_get();
  public final static native int ModelCache_EXPR_EXPR_IS_LESS_get();
  public final static native int ModelCache_EXPR_EXPR_IS_LESS_OR_EQUAL_get();
  public final static native int ModelCache_EXPR_EXPR_IS_EQUAL_get();
  public final static native int ModelCache_EXPR_EXPR_IS_NOT_EQUAL_get();
  public final static native int ModelCache_EXPR_EXPR_EXPRESSION_MAX_get();
  public final static native int ModelCache_EXPR_EXPR_CONSTANT_CONDITIONAL_get();
  public final static native int ModelCache_EXPR_EXPR_CONSTANT_EXPRESSION_MAX_get();
  public final static native int ModelCache_EXPR_CONSTANT_DIFFERENCE_get();
  public final static native int ModelCache_EXPR_CONSTANT_DIVIDE_get();
  public final static native int ModelCache_EXPR_CONSTANT_PROD_get();
  public final static native int ModelCache_EXPR_CONSTANT_MAX_get();
  public final static native int ModelCache_EXPR_CONSTANT_MIN_get();
  public final static native int ModelCache_EXPR_CONSTANT_SUM_get();
  public final static native int ModelCache_EXPR_CONSTANT_IS_EQUAL_get();
  public final static native int ModelCache_EXPR_CONSTANT_IS_NOT_EQUAL_get();
  public final static native int ModelCache_EXPR_CONSTANT_IS_GREATER_OR_EQUAL_get();
  public final static native int ModelCache_EXPR_CONSTANT_IS_LESS_OR_EQUAL_get();
  public final static native int ModelCache_EXPR_CONSTANT_EXPRESSION_MAX_get();
  public final static native int ModelCache_VAR_CONSTANT_CONSTANT_SEMI_CONTINUOUS_get();
  public final static native int ModelCache_VAR_CONSTANT_CONSTANT_EXPRESSION_MAX_get();
  public final static native int ModelCache_VAR_CONSTANT_ARRAY_ELEMENT_get();
  public final static native int ModelCache_VAR_CONSTANT_ARRAY_EXPRESSION_MAX_get();
  public final static native int ModelCache_VAR_ARRAY_CONSTANT_ARRAY_SCAL_PROD_get();
  public final static native int ModelCache_VAR_ARRAY_CONSTANT_ARRAY_EXPRESSION_MAX_get();
  public final static native int ModelCache_VAR_ARRAY_MAX_get();
  public final static native int ModelCache_VAR_ARRAY_MIN_get();
  public final static native int ModelCache_VAR_ARRAY_SUM_get();
  public final static native int ModelCache_VAR_ARRAY_EXPRESSION_MAX_get();
  public final static native int ModelCache_VAR_ARRAY_CONSTANT_INDEX_get();
  public final static native int ModelCache_VAR_ARRAY_CONSTANT_EXPRESSION_MAX_get();
  public final static native void delete_ModelCache(long jarg1);
  public final static native void ModelCache_Clear(long jarg1, ModelCache jarg1_);
  public final static native long ModelCache_FindVoidConstraint(long jarg1, ModelCache jarg1_, int jarg2);
  public final static native void ModelCache_InsertVoidConstraint(long jarg1, ModelCache jarg1_, long jarg2, Constraint jarg2_, int jarg3);
  public final static native long ModelCache_FindVarConstantConstraint(long jarg1, ModelCache jarg1_, long jarg2, IntVar jarg2_, long jarg3, int jarg4);
  public final static native void ModelCache_InsertVarConstantConstraint(long jarg1, ModelCache jarg1_, long jarg2, Constraint jarg2_, long jarg3, IntVar jarg3_, long jarg4, int jarg5);
  public final static native long ModelCache_FindVarConstantConstantConstraint(long jarg1, ModelCache jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4, int jarg5);
  public final static native void ModelCache_InsertVarConstantConstantConstraint(long jarg1, ModelCache jarg1_, long jarg2, Constraint jarg2_, long jarg3, IntVar jarg3_, long jarg4, long jarg5, int jarg6);
  public final static native long ModelCache_FindExprExprConstraint(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, int jarg4);
  public final static native void ModelCache_InsertExprExprConstraint(long jarg1, ModelCache jarg1_, long jarg2, Constraint jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntExpr jarg4_, int jarg5);
  public final static native long ModelCache_FindExprExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, int jarg3);
  public final static native void ModelCache_InsertExprExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, int jarg4);
  public final static native long ModelCache_FindExprConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, int jarg4);
  public final static native void ModelCache_InsertExprConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, int jarg5);
  public final static native long ModelCache_FindExprExprExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, int jarg4);
  public final static native void ModelCache_InsertExprExprExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntExpr jarg4_, int jarg5);
  public final static native long ModelCache_FindExprExprConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, int jarg5);
  public final static native void ModelCache_InsertExprExprConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntExpr jarg3_, long jarg4, IntExpr jarg4_, long jarg5, int jarg6);
  public final static native long ModelCache_FindVarConstantConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntVar jarg2_, long jarg3, long jarg4, int jarg5);
  public final static native void ModelCache_InsertVarConstantConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntVar jarg3_, long jarg4, long jarg5, int jarg6);
  public final static native long ModelCache_FindVarConstantArrayExpression(long jarg1, ModelCache jarg1_, long jarg2, IntVar jarg2_, long[] jarg3, int jarg4);
  public final static native void ModelCache_InsertVarConstantArrayExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, long jarg3, IntVar jarg3_, long[] jarg4, int jarg5);
  public final static native long ModelCache_FindVarArrayExpression(long jarg1, ModelCache jarg1_, IntVar[] jarg2, int jarg3);
  public final static native void ModelCache_InsertVarArrayExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, IntVar[] jarg3, int jarg4);
  public final static native long ModelCache_FindVarArrayConstantArrayExpression(long jarg1, ModelCache jarg1_, IntVar[] jarg2, long[] jarg3, int jarg4);
  public final static native void ModelCache_InsertVarArrayConstantArrayExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, IntVar[] jarg3, long[] jarg4, int jarg5);
  public final static native long ModelCache_FindVarArrayConstantExpression(long jarg1, ModelCache jarg1_, IntVar[] jarg2, long jarg3, int jarg4);
  public final static native void ModelCache_InsertVarArrayConstantExpression(long jarg1, ModelCache jarg1_, long jarg2, IntExpr jarg2_, IntVar[] jarg3, long jarg4, int jarg5);
  public final static native long ModelCache_solver(long jarg1, ModelCache jarg1_);
  public final static native long new_CpModelLoader(long jarg1, Solver jarg1_);
  public final static native void delete_CpModelLoader(long jarg1);
  public final static native long CpModelLoader_solver(long jarg1, CpModelLoader jarg1_);
  public final static native long CpModelLoader_IntegerExpression(long jarg1, CpModelLoader jarg1_, int jarg2);
  public final static native int CpModelLoader_NumIntegerExpressions(long jarg1, CpModelLoader jarg1_);
  public final static native long CpModelLoader_IntervalVariable(long jarg1, CpModelLoader jarg1_, int jarg2);
  public final static native int CpModelLoader_NumIntervalVariables(long jarg1, CpModelLoader jarg1_);
  public final static native long new_RevPartialSequence__SWIG_0(int[] jarg1);
  public final static native long new_RevPartialSequence__SWIG_1(int jarg1);
  public final static native void delete_RevPartialSequence(long jarg1);
  public final static native int RevPartialSequence_NumFirstRanked(long jarg1, RevPartialSequence jarg1_);
  public final static native int RevPartialSequence_NumLastRanked(long jarg1, RevPartialSequence jarg1_);
  public final static native int RevPartialSequence_Size(long jarg1, RevPartialSequence jarg1_);
  public final static native void RevPartialSequence_RankFirst(long jarg1, RevPartialSequence jarg1_, long jarg2, Solver jarg2_, int jarg3);
  public final static native void RevPartialSequence_RankLast(long jarg1, RevPartialSequence jarg1_, long jarg2, Solver jarg2_, int jarg3);
  public final static native boolean RevPartialSequence_IsRanked(long jarg1, RevPartialSequence jarg1_, int jarg2);
  public final static native String RevPartialSequence_toString(long jarg1, RevPartialSequence jarg1_);
  public final static native long new_UnsortedNullableRevBitset(int jarg1);
  public final static native void delete_UnsortedNullableRevBitset(long jarg1);
  public final static native void UnsortedNullableRevBitset_Init(long jarg1, UnsortedNullableRevBitset jarg1_, long jarg2, Solver jarg2_, long jarg3);
  public final static native boolean UnsortedNullableRevBitset_RevSubtract(long jarg1, UnsortedNullableRevBitset jarg1_, long jarg2, Solver jarg2_, long jarg3);
  public final static native boolean UnsortedNullableRevBitset_RevAnd(long jarg1, UnsortedNullableRevBitset jarg1_, long jarg2, Solver jarg2_, long jarg3);
  public final static native int UnsortedNullableRevBitset_ActiveWordSize(long jarg1, UnsortedNullableRevBitset jarg1_);
  public final static native boolean UnsortedNullableRevBitset_Empty(long jarg1, UnsortedNullableRevBitset jarg1_);
  public final static native boolean UnsortedNullableRevBitset_Intersects(long jarg1, UnsortedNullableRevBitset jarg1_, long jarg2, long jarg3);
  public final static native long UnsortedNullableRevBitset_bit_size(long jarg1, UnsortedNullableRevBitset jarg1_);
  public final static native long UnsortedNullableRevBitset_word_size(long jarg1, UnsortedNullableRevBitset jarg1_);
  public final static native long UnsortedNullableRevBitset_active_words(long jarg1, UnsortedNullableRevBitset jarg1_);
  public final static native boolean AreAllBound(IntVar[] jarg1);
  public final static native boolean AreAllBooleans(IntVar[] jarg1);
  public final static native boolean AreAllBoundTo(IntVar[] jarg1, long jarg2);
  public final static native long MaxVarArray(IntVar[] jarg1);
  public final static native long MinVarArray(IntVar[] jarg1);
  public final static native void FillValues(IntVar[] jarg1, long jarg2);
  public final static native long PosIntDivUp(long jarg1, long jarg2);
  public final static native long PosIntDivDown(long jarg1, long jarg2);
  public final static native long new_LocalSearchPhaseParameters();
  public final static native void delete_LocalSearchPhaseParameters(long jarg1);
  public final static native void delete_SolverToVoid(long jarg1);
  public final static native void SolverToVoid_run(long jarg1, SolverToVoid jarg1_, long jarg2, Solver jarg2_);
  public final static native long new_SolverToVoid();
  public final static native void SolverToVoid_director_connect(SolverToVoid obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void SolverToVoid_change_ownership(SolverToVoid obj, long cptr, boolean take_or_release);
  public final static native long new_RevInteger(int jarg1);
  public final static native int RevInteger_value(long jarg1, RevInteger jarg1_);
  public final static native void RevInteger_setValue(long jarg1, RevInteger jarg1_, long jarg2, Solver jarg2_, int jarg3);
  public final static native void delete_RevInteger(long jarg1);
  public final static native long new_RevLong(long jarg1);
  public final static native long RevLong_value(long jarg1, RevLong jarg1_);
  public final static native void RevLong_setValue(long jarg1, RevLong jarg1_, long jarg2, Solver jarg2_, long jarg3);
  public final static native void delete_RevLong(long jarg1);
  public final static native long new_RevBool(boolean jarg1);
  public final static native boolean RevBool_value(long jarg1, RevBool jarg1_);
  public final static native void RevBool_setValue(long jarg1, RevBool jarg1_, long jarg2, Solver jarg2_, boolean jarg3);
  public final static native void delete_RevBool(long jarg1);
  public final static native long new_AssignmentIntContainer();
  public final static native long AssignmentIntContainer_add(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_FastAdd(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_addAtPosition(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_, int jarg3);
  public final static native void AssignmentIntContainer_clear(long jarg1, AssignmentIntContainer jarg1_);
  public final static native void AssignmentIntContainer_Resize(long jarg1, AssignmentIntContainer jarg1_, long jarg2);
  public final static native boolean AssignmentIntContainer_empty(long jarg1, AssignmentIntContainer jarg1_);
  public final static native void AssignmentIntContainer_CopyIntersection(long jarg1, AssignmentIntContainer jarg1_, long jarg2, AssignmentIntContainer jarg2_);
  public final static native void AssignmentIntContainer_copy(long jarg1, AssignmentIntContainer jarg1_, long jarg2, AssignmentIntContainer jarg2_);
  public final static native boolean AssignmentIntContainer_contains(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_MutableElement__SWIG_0(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_MutableElementOrNull(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_element__SWIG_0(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_ElementPtrOrNull(long jarg1, AssignmentIntContainer jarg1_, long jarg2, IntVar jarg2_);
  public final static native long AssignmentIntContainer_elements(long jarg1, AssignmentIntContainer jarg1_);
  public final static native long AssignmentIntContainer_MutableElement__SWIG_1(long jarg1, AssignmentIntContainer jarg1_, int jarg2);
  public final static native long AssignmentIntContainer_element__SWIG_1(long jarg1, AssignmentIntContainer jarg1_, int jarg2);
  public final static native int AssignmentIntContainer_size(long jarg1, AssignmentIntContainer jarg1_);
  public final static native void AssignmentIntContainer_store(long jarg1, AssignmentIntContainer jarg1_);
  public final static native void AssignmentIntContainer_Restore(long jarg1, AssignmentIntContainer jarg1_);
  public final static native void delete_AssignmentIntContainer(long jarg1);
  public final static native long new_NodeEvaluator2();
  public final static native long NodeEvaluator2_run(long jarg1, NodeEvaluator2 jarg1_, int jarg2, int jarg3);
  public final static native long NodeEvaluator2_getPermanentCallback(long jarg1, NodeEvaluator2 jarg1_);
  public final static native void delete_NodeEvaluator2(long jarg1);
  public final static native void NodeEvaluator2_director_connect(NodeEvaluator2 obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NodeEvaluator2_change_ownership(NodeEvaluator2 obj, long cptr, boolean take_or_release);
  public final static native int RoutingModel_ROUTING_NOT_SOLVED_get();
  public final static native int RoutingModel_ROUTING_SUCCESS_get();
  public final static native int RoutingModel_ROUTING_FAIL_get();
  public final static native int RoutingModel_ROUTING_FAIL_TIMEOUT_get();
  public final static native int RoutingModel_ROUTING_INVALID_get();
  public final static native int RoutingModel_kFirstNode_get();
  public final static native int RoutingModel_kInvalidNodeIndex_get();
  public final static native long RoutingModel_kNoDisjunction_get();
  public final static native long RoutingModel_kNoDimension_get();
  public final static native long new_RoutingModel__SWIG_0(int jarg1, int jarg2, int jarg3);
  public final static native long new_RoutingModel__SWIG_1(int jarg1, int jarg2, int jarg3, byte[] jarg4);
  public final static native long new_RoutingModel__SWIG_2(int jarg1, int jarg2, long jarg3, byte[] jarg4);
  public final static native long new_RoutingModel__SWIG_3(int jarg1, int jarg2, int[] jarg3, int[] jarg4);
  public final static native long new_RoutingModel__SWIG_4(int jarg1, int jarg2, int[] jarg3, int[] jarg4, byte[] jarg5);
  public final static native void delete_RoutingModel(long jarg1);
  public final static native byte[] RoutingModel_defaultModelParameters();
  public final static native byte[] RoutingModel_defaultSearchParameters();
  public final static native boolean RoutingModel_addDimension(long jarg1, RoutingModel jarg1_, long jarg2, NodeEvaluator2 jarg2_, long jarg3, long jarg4, boolean jarg5, String jarg6);
  public final static native boolean RoutingModel_addDimensionWithVehicleTransits(long jarg1, RoutingModel jarg1_, NodeEvaluator2[] jarg2, long jarg3, long jarg4, boolean jarg5, String jarg6);
  public final static native boolean RoutingModel_addDimensionWithVehicleCapacity(long jarg1, RoutingModel jarg1_, long jarg2, NodeEvaluator2 jarg2_, long jarg3, long[] jarg4, boolean jarg5, String jarg6);
  public final static native boolean RoutingModel_addDimensionWithVehicleTransitAndCapacity(long jarg1, RoutingModel jarg1_, NodeEvaluator2[] jarg2, long jarg3, long[] jarg4, boolean jarg5, String jarg6);
  public final static native boolean RoutingModel_AddConstantDimensionWithSlack(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, long jarg4, boolean jarg5, String jarg6);
  public final static native boolean RoutingModel_addConstantDimension(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, boolean jarg4, String jarg5);
  public final static native boolean RoutingModel_addVectorDimension(long jarg1, RoutingModel jarg1_, long[] jarg2, long jarg3, boolean jarg4, String jarg5);
  public final static native long RoutingModel_GetAllDimensionNames(long jarg1, RoutingModel jarg1_);
  public final static native boolean RoutingModel_HasDimension(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native long RoutingModel_getDimensionOrDie(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native long RoutingModel_getMutableDimension(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native void RoutingModel_SetPrimaryConstrainedDimension(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native String RoutingModel_GetPrimaryConstrainedDimension(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_addAllActive(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_addDisjunction__SWIG_0(long jarg1, RoutingModel jarg1_, int[] jarg2);
  public final static native void RoutingModel_addDisjunction__SWIG_1(long jarg1, RoutingModel jarg1_, int[] jarg2, long jarg3);
  public final static native void RoutingModel_addDisjunction__SWIG_2(long jarg1, RoutingModel jarg1_, int[] jarg2, long jarg3, long jarg4);
  public final static native long RoutingModel_GetDisjunctionIndicesFromNode(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native long RoutingModel_GetDisjunctionIndicesFromVariableIndex(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native int[] RoutingModel_GetDisjunctionIndices(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_GetDisjunctionPenalty(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_GetDisjunctionMaxCardinality(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native int RoutingModel_GetNumberOfDisjunctions(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_GetPerfectBinaryDisjunctions(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_AddSoftSameVehicleConstraint(long jarg1, RoutingModel jarg1_, int[] jarg2, long jarg3);
  public final static native void RoutingModel_AddPickupAndDelivery(long jarg1, RoutingModel jarg1_, int jarg2, int jarg3);
  public final static native long RoutingModel_UnperformedPenalty(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_UnperformedPenaltyOrValue(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3);
  public final static native long RoutingModel_GetDepot(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_setArcCostEvaluatorOfAllVehicles(long jarg1, RoutingModel jarg1_, long jarg2, NodeEvaluator2 jarg2_);
  public final static native void RoutingModel_setArcCostEvaluatorOfVehicle(long jarg1, RoutingModel jarg1_, long jarg2, NodeEvaluator2 jarg2_, int jarg3);
  public final static native void RoutingModel_SetFixedCostOfAllVehicles(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native void RoutingModel_SetFixedCostOfVehicle(long jarg1, RoutingModel jarg1_, long jarg2, int jarg3);
  public final static native long RoutingModel_GetFixedCostOfVehicle(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native void RoutingModel_setFirstSolutionEvaluator(long jarg1, RoutingModel jarg1_, LongLongToLong jarg2);
  public final static native void RoutingModel_addLocalSearchOperator(long jarg1, RoutingModel jarg1_, long jarg2, LocalSearchOperator jarg2_);
  public final static native void RoutingModel_addSearchMonitor(long jarg1, RoutingModel jarg1_, long jarg2, SearchMonitor jarg2_);
  public final static native void RoutingModel_AddAtSolutionCallback(long jarg1, RoutingModel jarg1_, VoidToVoid jarg2);
  public final static native void RoutingModel_AddVariableMinimizedByFinalizer(long jarg1, RoutingModel jarg1_, long jarg2, IntVar jarg2_);
  public final static native void RoutingModel_AddVariableMaximizedByFinalizer(long jarg1, RoutingModel jarg1_, long jarg2, IntVar jarg2_);
  public final static native void RoutingModel_closeModel(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_CloseModelWithParameters(long jarg1, RoutingModel jarg1_, byte[] jarg2);
  public final static native long RoutingModel_solve__SWIG_0(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_);
  public final static native long RoutingModel_solve__SWIG_1(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_solveWithParameters(long jarg1, RoutingModel jarg1_, byte[] jarg2);
  public final static native long RoutingModel_solveFromAssignmentWithParameters(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_, byte[] jarg3);
  public final static native long RoutingModel_ComputeLowerBound(long jarg1, RoutingModel jarg1_);
  public final static native int RoutingModel_status(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_applyLocks(long jarg1, RoutingModel jarg1_, int[] jarg2);
  public final static native boolean RoutingModel_ApplyLocksToAllVehicles(long jarg1, RoutingModel jarg1_, int[][] jarg2, boolean jarg3);
  public final static native long RoutingModel_preAssignment(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_MutablePreAssignment(long jarg1, RoutingModel jarg1_);
  public final static native boolean RoutingModel_writeAssignment(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native long RoutingModel_readAssignment(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native long RoutingModel_RestoreAssignment(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_);
  public final static native long RoutingModel_ReadAssignmentFromRoutes(long jarg1, RoutingModel jarg1_, int[][] jarg2, boolean jarg3);
  public final static native boolean RoutingModel_routesToAssignment(long jarg1, RoutingModel jarg1_, int[][] jarg2, boolean jarg3, boolean jarg4, long jarg5, Assignment jarg5_);
  public final static native void RoutingModel_AssignmentToRoutes(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_, long jarg3);
  public final static native long RoutingModel_compactAssignment(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_);
  public final static native long RoutingModel_CompactAndCheckAssignment(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_);
  public final static native void RoutingModel_addToAssignment(long jarg1, RoutingModel jarg1_, long jarg2, IntVar jarg2_);
  public final static native void RoutingModel_AddIntervalToAssignment(long jarg1, RoutingModel jarg1_, long jarg2, IntervalVar jarg2_);
  public final static native void RoutingModel_AddLocalSearchFilter(long jarg1, RoutingModel jarg1_, long jarg2, LocalSearchFilter jarg2_);
  public final static native long RoutingModel_start(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native long RoutingModel_end(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native boolean RoutingModel_isStart(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native boolean RoutingModel_isEnd(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_next(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_, long jarg3);
  public final static native boolean RoutingModel_isVehicleUsed(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_, int jarg3);
  public final static native IntVar[] RoutingModel_nexts(long jarg1, RoutingModel jarg1_);
  public final static native IntVar[] RoutingModel_vehicleVars(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_nextVar(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_activeVar(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_vehicleVar(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_costVar(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_getArcCostForVehicle(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RoutingModel_CostsAreHomogeneousAcrossVehicles(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_GetHomogeneousCost(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3);
  public final static native long RoutingModel_GetArcCostForFirstSolution(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3);
  public final static native long RoutingModel_GetArcCostForClass(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RoutingModel_GetCostClassIndexOfVehicle(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native int RoutingModel_GetCostClassesCount(long jarg1, RoutingModel jarg1_);
  public final static native int RoutingModel_GetNonZeroCostClassesCount(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_GetVehicleClassIndexOfVehicle(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native int RoutingModel_GetVehicleClassesCount(long jarg1, RoutingModel jarg1_);
  public final static native int[] RoutingModel_GetSameVehicleIndicesOfIndex(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native boolean RoutingModel_ArcIsMoreConstrainedThanArc(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native String RoutingModel_DebugOutputAssignment(long jarg1, RoutingModel jarg1_, long jarg2, Assignment jarg2_, String jarg3);
  public final static native long RoutingModel_solver(long jarg1, RoutingModel jarg1_);
  public final static native int RoutingModel_nodes(long jarg1, RoutingModel jarg1_);
  public final static native int RoutingModel_vehicles(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_size(long jarg1, RoutingModel jarg1_);
  public final static native int RoutingModel_IndexToNode(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_NodeToIndex(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native boolean RoutingModel_HasIndex(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native long RoutingModel_GetNumberOfDecisionsInFirstSolution(long jarg1, RoutingModel jarg1_, byte[] jarg2);
  public final static native long RoutingModel_GetNumberOfRejectsInFirstSolution(long jarg1, RoutingModel jarg1_, byte[] jarg2);
  public final static native void RoutingModel_InitializeBuilders(long jarg1, Solver jarg1_);
  public final static native void RoutingModel_setCost(long jarg1, RoutingModel jarg1_, long jarg2, NodeEvaluator2 jarg2_);
  public final static native void RoutingModel_setVehicleCost(long jarg1, RoutingModel jarg1_, int jarg2, long jarg3, NodeEvaluator2 jarg3_);
  public final static native long RoutingModel_GetRouteFixedCost(long jarg1, RoutingModel jarg1_);
  public final static native void RoutingModel_SetRouteFixedCost(long jarg1, RoutingModel jarg1_, long jarg2);
  public final static native long RoutingModel_GetVehicleFixedCost(long jarg1, RoutingModel jarg1_, int jarg2);
  public final static native void RoutingModel_SetVehicleFixedCost(long jarg1, RoutingModel jarg1_, int jarg2, long jarg3);
  public final static native boolean RoutingModel_homogeneous_costs(long jarg1, RoutingModel jarg1_);
  public final static native int RoutingModel_GetVehicleCostCount(long jarg1, RoutingModel jarg1_);
  public final static native long RoutingModel_GetCost(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RoutingModel_GetVehicleClassCost(long jarg1, RoutingModel jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void RoutingModel_setDimensionTransitCost(long jarg1, RoutingModel jarg1_, String jarg2, long jarg3);
  public final static native long RoutingModel_getDimensionTransitCost(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native void RoutingModel_setDimensionSpanCost(long jarg1, RoutingModel jarg1_, String jarg2, long jarg3);
  public final static native long RoutingModel_getDimensionSpanCost(long jarg1, RoutingModel jarg1_, String jarg2);
  public final static native long RoutingModel_GetTransitValue(long jarg1, RoutingModel jarg1_, String jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long RoutingModel_cumulVar(long jarg1, RoutingModel jarg1_, long jarg2, String jarg3);
  public final static native long RoutingModel_transitVar(long jarg1, RoutingModel jarg1_, long jarg2, String jarg3);
  public final static native long RoutingModel_slackVar(long jarg1, RoutingModel jarg1_, long jarg2, String jarg3);
  public final static native void RoutingModel_setCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3, long jarg4, long jarg5);
  public final static native boolean RoutingModel_HasCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_getCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_getCumulVarSoftUpperBoundCoefficient(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native void RoutingModel_SetStartCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3, long jarg4, long jarg5);
  public final static native boolean RoutingModel_HasStartCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_GetStartCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_GetStartCumulVarSoftUpperBoundCoefficient(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native void RoutingModel_SetEndCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3, long jarg4, long jarg5);
  public final static native boolean RoutingModel_HasEndCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_GetEndCumulVarSoftUpperBound(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_GetEndCumulVarSoftUpperBoundCoefficient(long jarg1, RoutingModel jarg1_, int jarg2, String jarg3);
  public final static native long RoutingModel_MakeGuidedSlackFinalizer(long jarg1, RoutingModel jarg1_, long jarg2, RoutingDimension jarg2_, LongToLong jarg3);
  public final static native long RoutingModel_MakeSelfDependentDimensionFinalizer(long jarg1, RoutingModel jarg1_, long jarg2, RoutingDimension jarg2_);
  public final static native void RoutingModel_addMatrixDimension(long jarg1, RoutingModel jarg1_, long[][] jarg2, long jarg3, boolean jarg4, String jarg5);
  public final static native String RoutingModelVisitor_kLightElement_get();
  public final static native String RoutingModelVisitor_kLightElement2_get();
  public final static native long new_RoutingModelVisitor();
  public final static native void delete_RoutingModelVisitor(long jarg1);
  public final static native void delete_RoutingDimension(long jarg1);
  public final static native long RoutingDimension_model(long jarg1, RoutingDimension jarg1_);
  public final static native long RoutingDimension_GetTransitValue(long jarg1, RoutingDimension jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RoutingDimension_GetTransitValueFromClass(long jarg1, RoutingDimension jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long RoutingDimension_cumulVar(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_transitVar(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_FixedTransitVar(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_slackVar(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native IntVar[] RoutingDimension_cumuls(long jarg1, RoutingDimension jarg1_);
  public final static native IntVar[] RoutingDimension_transits(long jarg1, RoutingDimension jarg1_);
  public final static native IntVar[] RoutingDimension_slacks(long jarg1, RoutingDimension jarg1_);
  public final static native void RoutingDimension_SetSpanUpperBoundForVehicle(long jarg1, RoutingDimension jarg1_, long jarg2, int jarg3);
  public final static native void RoutingDimension_setSpanCostCoefficientForVehicle(long jarg1, RoutingDimension jarg1_, long jarg2, int jarg3);
  public final static native void RoutingDimension_setSpanCostCoefficientForAllVehicles(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native void RoutingDimension_setGlobalSpanCostCoefficient(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native void RoutingDimension_setCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void RoutingDimension_SetStartCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void RoutingDimension_SetEndCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void RoutingDimension_SetCumulVarSoftUpperBoundFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RoutingDimension_HasCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native boolean RoutingDimension_HasStartCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native boolean RoutingDimension_HasEndCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native boolean RoutingDimension_HasCumulVarSoftUpperBoundFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_getCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetStartCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetEndCumulVarSoftUpperBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetCumulVarSoftUpperBoundFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_getCumulVarSoftUpperBoundCoefficient(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetStartCumulVarSoftUpperBoundCoefficient(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetEndCumulVarSoftUpperBoundCoefficient(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetCumulVarSoftUpperBoundCoefficientFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native void RoutingDimension_SetCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void RoutingDimension_SetStartCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void RoutingDimension_SetEndCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void RoutingDimension_SetCumulVarSoftLowerBoundFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean RoutingDimension_HasCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native boolean RoutingDimension_HasStartCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native boolean RoutingDimension_HasEndCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native boolean RoutingDimension_HasCumulVarSoftLowerBoundFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_GetCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetStartCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetEndCumulVarSoftLowerBound(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetCumulVarSoftLowerBoundFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native long RoutingDimension_GetCumulVarSoftLowerBoundCoefficient(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetStartCumulVarSoftLowerBoundCoefficient(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetEndCumulVarSoftLowerBoundCoefficient(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_GetCumulVarSoftLowerBoundCoefficientFromIndex(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native void RoutingDimension_SetBreakIntervalsOfVehicle(long jarg1, RoutingDimension jarg1_, long jarg2, int jarg3);
  public final static native long RoutingDimension_base_dimension(long jarg1, RoutingDimension jarg1_);
  public final static native long RoutingDimension_ShortestTransitionSlack(long jarg1, RoutingDimension jarg1_, long jarg2);
  public final static native String RoutingDimension_name(long jarg1, RoutingDimension jarg1_);
  public final static native long RoutingDimension_GetSpanUpperBoundForVehicle(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_getSpanCostCoefficientForVehicle(long jarg1, RoutingDimension jarg1_, int jarg2);
  public final static native long RoutingDimension_getGlobalSpanCostCoefficient(long jarg1, RoutingDimension jarg1_);
  public final static native void delete_IntVarFilteredDecisionBuilder(long jarg1);
  public final static native long IntVarFilteredDecisionBuilder_nextWrap(long jarg1, IntVarFilteredDecisionBuilder jarg1_, long jarg2, Solver jarg2_);
  public final static native boolean IntVarFilteredDecisionBuilder_BuildSolution(long jarg1, IntVarFilteredDecisionBuilder jarg1_);
  public final static native long IntVarFilteredDecisionBuilder_number_of_decisions(long jarg1, IntVarFilteredDecisionBuilder jarg1_);
  public final static native long IntVarFilteredDecisionBuilder_number_of_rejects(long jarg1, IntVarFilteredDecisionBuilder jarg1_);
  public final static native void delete_RoutingFilteredDecisionBuilder(long jarg1);
  public final static native long RoutingFilteredDecisionBuilder_model(long jarg1, RoutingFilteredDecisionBuilder jarg1_);
  public final static native boolean RoutingFilteredDecisionBuilder_InitializeRoutes(long jarg1, RoutingFilteredDecisionBuilder jarg1_);
  public final static native int RoutingFilteredDecisionBuilder_GetStartChainEnd(long jarg1, RoutingFilteredDecisionBuilder jarg1_, int jarg2);
  public final static native void RoutingFilteredDecisionBuilder_MakeDisjunctionNodesUnperformed(long jarg1, RoutingFilteredDecisionBuilder jarg1_, long jarg2);
  public final static native void RoutingFilteredDecisionBuilder_MakeUnassignedNodesUnperformed(long jarg1, RoutingFilteredDecisionBuilder jarg1_);
  public final static native void delete_CheapestInsertionFilteredDecisionBuilder(long jarg1);
  public final static native void delete_GlobalCheapestInsertionFilteredDecisionBuilder(long jarg1);
  public final static native boolean GlobalCheapestInsertionFilteredDecisionBuilder_BuildSolution(long jarg1, GlobalCheapestInsertionFilteredDecisionBuilder jarg1_);
  public final static native void delete_LocalCheapestInsertionFilteredDecisionBuilder(long jarg1);
  public final static native boolean LocalCheapestInsertionFilteredDecisionBuilder_BuildSolution(long jarg1, LocalCheapestInsertionFilteredDecisionBuilder jarg1_);
  public final static native void delete_CheapestAdditionFilteredDecisionBuilder(long jarg1);
  public final static native boolean CheapestAdditionFilteredDecisionBuilder_BuildSolution(long jarg1, CheapestAdditionFilteredDecisionBuilder jarg1_);
  public final static native void delete_EvaluatorCheapestAdditionFilteredDecisionBuilder(long jarg1);
  public final static native void delete_ComparatorCheapestAdditionFilteredDecisionBuilder(long jarg1);
  public final static native void delete_SavingsFilteredDecisionBuilder(long jarg1);
  public final static native boolean SavingsFilteredDecisionBuilder_BuildSolution(long jarg1, SavingsFilteredDecisionBuilder jarg1_);
  public final static native void delete_ChristofidesFilteredDecisionBuilder(long jarg1);
  public final static native boolean ChristofidesFilteredDecisionBuilder_BuildSolution(long jarg1, ChristofidesFilteredDecisionBuilder jarg1_);
  public final static native void delete_RoutingLocalSearchFilter(long jarg1);
  public final static native void RoutingLocalSearchFilter_InjectObjectiveValue(long jarg1, RoutingLocalSearchFilter jarg1_, long jarg2);
  public final static native void delete_BasePathFilter(long jarg1);
  public final static native boolean BasePathFilter_accept(long jarg1, BasePathFilter jarg1_, long jarg2, Assignment jarg2_, long jarg3, Assignment jarg3_);
  public final static native void BasePathFilter_onSynchronize(long jarg1, BasePathFilter jarg1_, long jarg2, Assignment jarg2_);
  public final static native long PropagationBaseObject_SWIGUpcast(long jarg1);
  public final static native long Decision_SWIGUpcast(long jarg1);
  public final static native long DecisionVisitor_SWIGUpcast(long jarg1);
  public final static native long DecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long Demon_SWIGUpcast(long jarg1);
  public final static native long ModelVisitor_SWIGUpcast(long jarg1);
  public final static native long Constraint_SWIGUpcast(long jarg1);
  public final static native long CastConstraint_SWIGUpcast(long jarg1);
  public final static native long SearchMonitor_SWIGUpcast(long jarg1);
  public final static native long IntExpr_SWIGUpcast(long jarg1);
  public final static native long IntVarIterator_SWIGUpcast(long jarg1);
  public final static native long IntVar_SWIGUpcast(long jarg1);
  public final static native long SolutionCollector_SWIGUpcast(long jarg1);
  public final static native long OptimizeVar_SWIGUpcast(long jarg1);
  public final static native long SearchLimit_SWIGUpcast(long jarg1);
  public final static native long NoGoodManager_SWIGUpcast(long jarg1);
  public final static native long IntervalVar_SWIGUpcast(long jarg1);
  public final static native long SequenceVar_SWIGUpcast(long jarg1);
  public final static native long IntVarElement_SWIGUpcast(long jarg1);
  public final static native long IntervalVarElement_SWIGUpcast(long jarg1);
  public final static native long SequenceVarElement_SWIGUpcast(long jarg1);
  public final static native long Assignment_SWIGUpcast(long jarg1);
  public final static native long Pack_SWIGUpcast(long jarg1);
  public final static native long DisjunctiveConstraint_SWIGUpcast(long jarg1);
  public final static native long SolutionPool_SWIGUpcast(long jarg1);
  public final static native long BaseIntExpr_SWIGUpcast(long jarg1);
  public final static native long LocalSearchOperator_SWIGUpcast(long jarg1);
  public final static native long IntVarLocalSearchOperatorTemplate_SWIGUpcast(long jarg1);
  public final static native long IntVarLocalSearchOperator_SWIGUpcast(long jarg1);
  public final static native long SequenceVarLocalSearchOperatorTemplate_SWIGUpcast(long jarg1);
  public final static native long SequenceVarLocalSearchOperator_SWIGUpcast(long jarg1);
  public final static native long BaseLns_SWIGUpcast(long jarg1);
  public final static native long ChangeValue_SWIGUpcast(long jarg1);
  public final static native long PathOperator_SWIGUpcast(long jarg1);
  public final static native long PathWithPreviousNodesOperator_SWIGUpcast(long jarg1);
  public final static native long LocalSearchFilter_SWIGUpcast(long jarg1);
  public final static native long IntVarLocalSearchFilter_SWIGUpcast(long jarg1);
  public final static native long PropagationMonitor_SWIGUpcast(long jarg1);
  public final static native long LocalSearchMonitor_SWIGUpcast(long jarg1);
  public final static native long BooleanVar_SWIGUpcast(long jarg1);
  public final static native long SymmetryBreaker_SWIGUpcast(long jarg1);
  public final static native long SearchLog_SWIGUpcast(long jarg1);
  public final static native long RoutingModelVisitor_SWIGUpcast(long jarg1);
  public final static native long IntVarFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long RoutingFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long CheapestInsertionFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long GlobalCheapestInsertionFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long LocalCheapestInsertionFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long CheapestAdditionFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long EvaluatorCheapestAdditionFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long ComparatorCheapestAdditionFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long SavingsFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long ChristofidesFilteredDecisionBuilder_SWIGUpcast(long jarg1);
  public final static native long RoutingLocalSearchFilter_SWIGUpcast(long jarg1);
  public final static native long BasePathFilter_SWIGUpcast(long jarg1);

  public static long SwigDirector_LongToLong_run(LongToLong jself, long arg0) {
    return jself.run(arg0);
  }
  public static long SwigDirector_LongLongToLong_run(LongLongToLong jself, long arg0, long arg1) {
    return jself.run(arg0, arg1);
  }
  public static long SwigDirector_IntIntToLong_run(IntIntToLong jself, int arg0, int arg1) {
    return jself.run(arg0, arg1);
  }
  public static long SwigDirector_LongLongLongToLong_run(LongLongLongToLong jself, long arg0, long arg1, long arg2) {
    return jself.run(arg0, arg1, arg2);
  }
  public static boolean SwigDirector_LongToBoolean_run(LongToBoolean jself, long arg0) {
    return jself.run(arg0);
  }
  public static String SwigDirector_VoidToString_run(VoidToString jself) {
    return jself.run();
  }
  public static boolean SwigDirector_VoidToBoolean_run(VoidToBoolean jself) {
    return jself.run();
  }
  public static boolean SwigDirector_LongLongLongToBoolean_run(LongLongLongToBoolean jself, long i, long j, long k) {
    return jself.run(i, j, k);
  }
  public static void SwigDirector_LongToVoid_run(LongToVoid jself, long i) {
    jself.run(i);
  }
  public static void SwigDirector_VoidToVoid_run(VoidToVoid jself) {
    jself.run();
  }
  public static String SwigDirector_Decision_toString(Decision jself) {
    return jself.toString();
  }
  public static void SwigDirector_Decision_Apply(Decision jself, long s) {
    jself.Apply((s == 0) ? null : new Solver(s, false));
  }
  public static void SwigDirector_Decision_Refute(Decision jself, long s) {
    jself.Refute((s == 0) ? null : new Solver(s, false));
  }
  public static void SwigDirector_Decision_accept(Decision jself, long visitor) {
    jself.accept((visitor == 0) ? null : new DecisionVisitor(visitor, false));
  }
  public static String SwigDirector_DecisionBuilder_toString(DecisionBuilder jself) {
    return jself.toString();
  }
  public static long SwigDirector_DecisionBuilder_nextWrap(DecisionBuilder jself, long s) {
    return Decision.getCPtr(jself.nextWrap((s == 0) ? null : new Solver(s, false)));
  }
  public static String SwigDirector_SearchMonitor_toString(SearchMonitor jself) {
    return jself.toString();
  }
  public static void SwigDirector_SearchMonitor_enterSearch(SearchMonitor jself) {
    jself.enterSearch();
  }
  public static void SwigDirector_SearchMonitor_restartSearch(SearchMonitor jself) {
    jself.restartSearch();
  }
  public static void SwigDirector_SearchMonitor_ExitSearch(SearchMonitor jself) {
    jself.ExitSearch();
  }
  public static void SwigDirector_SearchMonitor_beginNextDecision(SearchMonitor jself, long b) {
    jself.beginNextDecision((b == 0) ? null : new DecisionBuilder(b, false));
  }
  public static void SwigDirector_SearchMonitor_endNextDecision(SearchMonitor jself, long b, long d) {
    jself.endNextDecision((b == 0) ? null : new DecisionBuilder(b, false), (d == 0) ? null : new Decision(d, false));
  }
  public static void SwigDirector_SearchMonitor_applyDecision(SearchMonitor jself, long d) {
    jself.applyDecision((d == 0) ? null : new Decision(d, false));
  }
  public static void SwigDirector_SearchMonitor_refuteDecision(SearchMonitor jself, long d) {
    jself.refuteDecision((d == 0) ? null : new Decision(d, false));
  }
  public static void SwigDirector_SearchMonitor_afterDecision(SearchMonitor jself, long d, boolean apply) {
    jself.afterDecision((d == 0) ? null : new Decision(d, false), apply);
  }
  public static void SwigDirector_SearchMonitor_beginFail(SearchMonitor jself) {
    jself.beginFail();
  }
  public static void SwigDirector_SearchMonitor_endFail(SearchMonitor jself) {
    jself.endFail();
  }
  public static void SwigDirector_SearchMonitor_beginInitialPropagation(SearchMonitor jself) {
    jself.beginInitialPropagation();
  }
  public static void SwigDirector_SearchMonitor_endInitialPropagation(SearchMonitor jself) {
    jself.endInitialPropagation();
  }
  public static boolean SwigDirector_SearchMonitor_acceptSolution(SearchMonitor jself) {
    return jself.acceptSolution();
  }
  public static boolean SwigDirector_SearchMonitor_atSolution(SearchMonitor jself) {
    return jself.atSolution();
  }
  public static void SwigDirector_SearchMonitor_noMoreSolutions(SearchMonitor jself) {
    jself.noMoreSolutions();
  }
  public static boolean SwigDirector_SearchMonitor_localOptimum(SearchMonitor jself) {
    return jself.localOptimum();
  }
  public static boolean SwigDirector_SearchMonitor_acceptDelta(SearchMonitor jself, long delta, long deltadelta) {
    return jself.acceptDelta((delta == 0) ? null : new Assignment(delta, false), (deltadelta == 0) ? null : new Assignment(deltadelta, false));
  }
  public static void SwigDirector_SearchMonitor_acceptNeighbor(SearchMonitor jself) {
    jself.acceptNeighbor();
  }
  public static void SwigDirector_SearchMonitor_periodicCheck(SearchMonitor jself) {
    jself.periodicCheck();
  }
  public static int SwigDirector_SearchMonitor_ProgressPercent(SearchMonitor jself) {
    return jself.ProgressPercent();
  }
  public static void SwigDirector_SearchMonitor_accept(SearchMonitor jself, long visitor) {
    jself.accept((visitor == 0) ? null : new ModelVisitor(visitor, false));
  }
  public static void SwigDirector_SearchMonitor_Install(SearchMonitor jself) {
    jself.Install();
  }
  public static String SwigDirector_LocalSearchOperator_toString(LocalSearchOperator jself) {
    return jself.toString();
  }
  public static boolean SwigDirector_LocalSearchOperator_nextNeighbor(LocalSearchOperator jself, long delta, long deltadelta) {
    return jself.nextNeighbor((delta == 0) ? null : new Assignment(delta, false), (deltadelta == 0) ? null : new Assignment(deltadelta, false));
  }
  public static void SwigDirector_LocalSearchOperator_start(LocalSearchOperator jself, long assignment) {
    jself.start((assignment == 0) ? null : new Assignment(assignment, false));
  }
  public static String SwigDirector_IntVarLocalSearchOperator_toString(IntVarLocalSearchOperator jself) {
    return jself.toString();
  }
  public static void SwigDirector_IntVarLocalSearchOperator_start(IntVarLocalSearchOperator jself, long assignment) {
    jself.start((assignment == 0) ? null : new Assignment(assignment, false));
  }
  public static boolean SwigDirector_IntVarLocalSearchOperator_isIncremental(IntVarLocalSearchOperator jself) {
    return jself.isIncremental();
  }
  public static boolean SwigDirector_IntVarLocalSearchOperator_SkipUnchanged(IntVarLocalSearchOperator jself, int index) {
    return jself.SkipUnchanged(index);
  }
  public static void SwigDirector_IntVarLocalSearchOperator_onStart(IntVarLocalSearchOperator jself) {
    jself.onStart();
  }
  public static boolean SwigDirector_IntVarLocalSearchOperator_oneNeighbor(IntVarLocalSearchOperator jself) {
    return jself.oneNeighbor();
  }
  public static String SwigDirector_SequenceVarLocalSearchOperator_toString(SequenceVarLocalSearchOperator jself) {
    return jself.toString();
  }
  public static boolean SwigDirector_SequenceVarLocalSearchOperator_nextNeighbor(SequenceVarLocalSearchOperator jself, long delta, long deltadelta) {
    return jself.nextNeighbor((delta == 0) ? null : new Assignment(delta, false), (deltadelta == 0) ? null : new Assignment(deltadelta, false));
  }
  public static void SwigDirector_SequenceVarLocalSearchOperator_start(SequenceVarLocalSearchOperator jself, long assignment) {
    jself.start((assignment == 0) ? null : new Assignment(assignment, false));
  }
  public static boolean SwigDirector_SequenceVarLocalSearchOperator_isIncremental(SequenceVarLocalSearchOperator jself) {
    return jself.isIncremental();
  }
  public static boolean SwigDirector_SequenceVarLocalSearchOperator_SkipUnchanged(SequenceVarLocalSearchOperator jself, int index) {
    return jself.SkipUnchanged(index);
  }
  public static void SwigDirector_SequenceVarLocalSearchOperator_onStart(SequenceVarLocalSearchOperator jself) {
    jself.onStart();
  }
  public static String SwigDirector_BaseLns_toString(BaseLns jself) {
    return jself.toString();
  }
  public static void SwigDirector_BaseLns_start(BaseLns jself, long assignment) {
    jself.start((assignment == 0) ? null : new Assignment(assignment, false));
  }
  public static boolean SwigDirector_BaseLns_isIncremental(BaseLns jself) {
    return jself.isIncremental();
  }
  public static void SwigDirector_BaseLns_initFragments(BaseLns jself) {
    jself.initFragments();
  }
  public static boolean SwigDirector_BaseLns_nextFragment(BaseLns jself) {
    return jself.nextFragment();
  }
  public static String SwigDirector_ChangeValue_toString(ChangeValue jself) {
    return jself.toString();
  }
  public static void SwigDirector_ChangeValue_start(ChangeValue jself, long assignment) {
    jself.start((assignment == 0) ? null : new Assignment(assignment, false));
  }
  public static boolean SwigDirector_ChangeValue_isIncremental(ChangeValue jself) {
    return jself.isIncremental();
  }
  public static boolean SwigDirector_ChangeValue_SkipUnchanged(ChangeValue jself, int index) {
    return jself.SkipUnchanged(index);
  }
  public static void SwigDirector_ChangeValue_onStart(ChangeValue jself) {
    jself.onStart();
  }
  public static boolean SwigDirector_ChangeValue_oneNeighbor(ChangeValue jself) {
    return jself.oneNeighbor();
  }
  public static long SwigDirector_ChangeValue_modifyValue(ChangeValue jself, long index, long value) {
    return jself.modifyValue(index, value);
  }
  public static String SwigDirector_PathOperator_toString(PathOperator jself) {
    return jself.toString();
  }
  public static void SwigDirector_PathOperator_start(PathOperator jself, long assignment) {
    jself.start((assignment == 0) ? null : new Assignment(assignment, false));
  }
  public static boolean SwigDirector_PathOperator_isIncremental(PathOperator jself) {
    return jself.isIncremental();
  }
  public static boolean SwigDirector_PathOperator_SkipUnchanged(PathOperator jself, int index) {
    return jself.SkipUnchanged(index);
  }
  public static void SwigDirector_PathOperator_onStart(PathOperator jself) {
    jself.onStart();
  }
  public static boolean SwigDirector_PathOperator_oneNeighbor(PathOperator jself) {
    return jself.oneNeighbor();
  }
  public static boolean SwigDirector_PathOperator_neighbor(PathOperator jself) {
    return jself.neighbor();
  }
  public static boolean SwigDirector_PathOperator_RestartAtPathStartOnSynchronize(PathOperator jself) {
    return jself.RestartAtPathStartOnSynchronize();
  }
  public static boolean SwigDirector_PathOperator_OnSamePathAsPreviousBase(PathOperator jself, long base_index) {
    return jself.OnSamePathAsPreviousBase(base_index);
  }
  public static long SwigDirector_PathOperator_GetBaseNodeRestartPosition(PathOperator jself, int base_index) {
    return jself.GetBaseNodeRestartPosition(base_index);
  }
  public static void SwigDirector_PathOperator_SetNextBaseToIncrement(PathOperator jself, long base_index) {
    jself.SetNextBaseToIncrement(base_index);
  }
  public static boolean SwigDirector_PathOperator_InitPosition(PathOperator jself) {
    return jself.InitPosition();
  }
  public static String SwigDirector_IntVarLocalSearchFilter_toString(IntVarLocalSearchFilter jself) {
    return jself.toString();
  }
  public static boolean SwigDirector_IntVarLocalSearchFilter_accept(IntVarLocalSearchFilter jself, long delta, long deltadelta) {
    return jself.accept((delta == 0) ? null : new Assignment(delta, false), (deltadelta == 0) ? null : new Assignment(deltadelta, false));
  }
  public static boolean SwigDirector_IntVarLocalSearchFilter_isIncremental(IntVarLocalSearchFilter jself) {
    return jself.isIncremental();
  }
  public static void SwigDirector_IntVarLocalSearchFilter_InjectObjectiveValue(IntVarLocalSearchFilter jself, long objective_value) {
    jself.InjectObjectiveValue(objective_value);
  }
  public static void SwigDirector_IntVarLocalSearchFilter_onSynchronize(IntVarLocalSearchFilter jself, long delta) {
    jself.onSynchronize((delta == 0) ? null : new Assignment(delta, false));
  }
  public static String SwigDirector_SymmetryBreaker_toString(SymmetryBreaker jself) {
    return jself.toString();
  }
  public static void SwigDirector_SymmetryBreaker_VisitSetVariableValue(SymmetryBreaker jself, long var, long value) {
    jself.VisitSetVariableValue((var == 0) ? null : new IntVar(var, false), value);
  }
  public static void SwigDirector_SymmetryBreaker_VisitSplitVariableDomain(SymmetryBreaker jself, long var, long value, boolean start_with_lower_half) {
    jself.VisitSplitVariableDomain((var == 0) ? null : new IntVar(var, false), value, start_with_lower_half);
  }
  public static void SwigDirector_SymmetryBreaker_VisitScheduleOrPostpone(SymmetryBreaker jself, long var, long est) {
    jself.VisitScheduleOrPostpone((var == 0) ? null : new IntervalVar(var, false), est);
  }
  public static void SwigDirector_SymmetryBreaker_VisitScheduleOrExpedite(SymmetryBreaker jself, long var, long est) {
    jself.VisitScheduleOrExpedite((var == 0) ? null : new IntervalVar(var, false), est);
  }
  public static void SwigDirector_SymmetryBreaker_VisitRankFirstInterval(SymmetryBreaker jself, long sequence, int index) {
    jself.VisitRankFirstInterval((sequence == 0) ? null : new SequenceVar(sequence, false), index);
  }
  public static void SwigDirector_SymmetryBreaker_VisitRankLastInterval(SymmetryBreaker jself, long sequence, int index) {
    jself.VisitRankLastInterval((sequence == 0) ? null : new SequenceVar(sequence, false), index);
  }
  public static void SwigDirector_SymmetryBreaker_VisitUnknownDecision(SymmetryBreaker jself) {
    jself.VisitUnknownDecision();
  }
  public static void SwigDirector_SolverToVoid_run(SolverToVoid jself, long arg0) {
    jself.run((arg0 == 0) ? null : new Solver(arg0, false));
  }
  public static long SwigDirector_NodeEvaluator2_run(NodeEvaluator2 jself, int i, int j) {
    return jself.run(i, j);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
